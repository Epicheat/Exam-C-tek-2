Details administratifs:

- Aucune forme de communication n'est permise.

	- Vous devez avoir votre carte d'etudiant. Vous devez la poser face visible
	  sur votre table

	- Ceci est un examen, il est interdit de discuter, ecouter de la musique,
	  faire du bruit, ou de produire toute autres nuisances pouvant deranger les
	  autres etudiants ou perturber le bon deroulement de l'examen

	- Vos telephones portables doivent etre eteints.
	
	- Il faudra utiliser le sous-repertoire "rendu" a la racine du compte,
	  il contiendra les repertoires aux noms demandes pour chaque
	  exercice.

	- Chaque exercice doit etre realise dans le repertoire correspondant au 
	  nom indique dans l'en-tete de chaque exercice.

	- Le repertoire "rendu", doit contenir un fichier nomme "auteur"
	  comprenant :
		le login (ex: jog) suivi d'un '\n'.
	  ce qui doit donner:

	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- C'est un programme qui s'occupe du ramassage, respectez les noms,
	  les chemins, les fichiers et les repertoires ...

	- LES DROITS DE VOS FICHIERS N'ONT AUCUNE IMPORTANCE, VOUS N'AVEZ DONC
	  PAS BESOIN DE LES CHANGER (SAUF SI ON VOUS LE DEMANDE DANS LE SUJET).
	
	- En cas de probleme technique avec le sujet, on ne doit s'adresser qu'au
	  surveillant uniquement.

	- Tout materiel non explicitement autorise est strictement interdit.

	- LES EXERCICES DOIVENT ETRE REALISES DANS L'ORDRE, la correction 
	  de l'examen s'arretera des qu'un exercice sera considere comme faux.

	- Toute sortie est definitive.


Le Code :

	- Des fonctions utiles sont parfois donnees dans le repertoire
	  ~/sujet/misc

	- Le releve du code est automatise, un programme testera le bon
	  fonctionnement des exercices.

	- Les fonctions autorisees sont indiquees dans l'en-tete de chaque 
	  exercice. Vous pouvez recoder toutes les fonctions a votre guise.

	- Toute fonction non autorisee explicitement est interdite.

	- Vous avez le droit a des feuilles blanches et un stylo.

	- Les exercices dit "subsidiaires" sont des exercices qui donnent des
	  points si vous avez fait les exercices qui les precedent.

	- Les exercices dit "bonus" sont des exercices qui donnent des points 
	  supplementaires meme si vous ne faites pas les exercices qui les 
	  precedent.

	- Pour toute question apres l'examen, creez un ticket sur l'intra-bocal
	  (http://intra-bocal.epitech.net), ou envoyez un mail a
	  contact@staff.epita.fr
-------------------------------------------------------------------------------
Administrative details:

- No communication of any kind is allowed.

	- You must have your student card. You must put it, face up, on your desk.

	- This is an exam, it is forbidden to talk, listen to music, make noise, or
	  produce any kind of nuisance that may disturb other students or prevent
	  this exam from running smoothly.

	- Your cell phones must be OFF.

	- You will have to use the "rendu" subdirectory at the root of your account,
	  which shall contain the directories named according to each exercise's
	  instructions.

	- Each exercise must be carried out in the directory mentioned in the
	  exercise's header.

	- The "rendu" subdirectory must contain a file named "auteur", containing:
	  the login (ex: jog) followed by a '\n'.

	  It should be so:
	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- The collection will be handled by a program, so you must respect the
	  names, paths, of all the files and directories...

	- RIGHTS OF YOUR FILES ARE OF NO CONSEQUENCE, YOU DO NOT HAVE TO CHANGE
	  THEM (EXCEPT IF THE SUBJECT ASKS YOU TO).

	- In case of a technical problem with the subject, you have to ask a
	  supervisor (and ONLY a supervisor).

	- Any equipment that is not explicitly allowed is strictly forbidden.

	- EXERCISES MUST BE CARRIED OUT IN ORDER. Grading will stop as soon as
	  an exercise is deemed false.

	- Any exit is definitive.


The code:

	- Useful functions are sometimes given in the ~/sujet/misc directory.

	- Collection of the code is automated, and a program will check that
	  your exercises work correctly.

	- Allowed functions are specified in each exercise's header. You can
	  re-code any function you like.

	- Any function not explicitly allowed is forbidden.

	- You have a right to blank sheets of paper and a pen.

	- "Subsidiary" exercises are exercises that give points if you have
	  done the previous exercises.

	- "Bonus" exercises are exercises that give bonus points even if you
	  haven't done the previous exercises.

	- For any question after the exam, create a ticket on the intra-bocal
	  (http://intra-bocal.epitech.net), or send a mail to
	  contact@staff.epita.fr

 ----------******------------*****------------******------------*****----------


------------------- ******** -------------------

Exercice 1  : half_str
________________________
Nom de l'executable     :       half_str
Nom du repertoire       :       ex_1
Temps de realisation    :       15 minutes
Language		:	C
Fonction autorisee      :       my_putchar, my_strlen, my_putstr, write
Makefile		:	obligatoire


         Ecrire un programme qui prend en parametre une ou plusieurs chaines
	 de caracteres et qui affiche chaque chaine un caractere sur deux.

	 Si plusieurs chaines sont passees en parametres, le programme
	 affiche '\n' apres chaque chaine.

         L'affichage se termine toujours par un '\n'.

         Si aucun parametre n'est transmis, le programme affiche '\n'.



exemple 1:
> ./half_str "abc"
ac
>

exemple 2:
> ./half_str "test de phrase" "deuxieme test" "un avant dernier test" "" "enfin c'est finis" | cat -e
ts eprs$
duim et$
u vn ene et$
$
efncetfns$
>

exemple 3:
> ./half_str "a btcfdceqf gehdiajikhllmgnaovpyqer srttuuvawcxayaz" "142637415869728395" "          " "Baodnxnce   cshja4nycrew qaq dtdoduqsq" | cat -e 
abcdefghijklmnopqrstuvwxyz$
123456789$
     $
Bonne chance a tous$
>

exemple 3:
> ./half_str | cat -e
$
>
-------------------------------------------------------------------------------
Exercise 1  : half_str
________________________
Executable name         :       half_str
Directory name          :       ex_1
Suggested time          :       15 minutes
Language                :       C
Allowed functions       :       my_putchar, my_strlen, my_putstr, write
Makefile                :       yes


        Write a program that takes one or more strings and displays each
        string's odd characters.

        If multiple strings are passed, the program displays '\n' after each.

        The output is always finished by a '\n'.

        If no parameters are passed, the program displays '\n'.


Example 1:
> ./half_str "abc"
ac
>

Example 2:
> ./half_str "test de phrase" "deuxieme test" "un avant dernier test" "" "enfin c'est finis" | cat -e
ts eprs$
duim et$
u vn ene et$
$
efncetfns$
>

Example 3:
> ./half_str "a btcfdceqf gehdiajikhllmgnaovpyqer srttuuvawcxayaz" "142637415869728395" "          " "Baodnxnce   cshja4nycrew qaq dtdoduqsq" | cat -e 
abcdefghijklmnopqrstuvwxyz$
123456789$
     $
Bonne chance a tous$
>

Example 3:
> ./half_str | cat -e
$
>


------------------- ******** -------------------

Exercice 2 : common_str
__________________________
Nom du programme                :       common_str
Nom du repertoire               :       ex_2
Temps de realisation            :       30 minutes
Fonctions autorisees            :       my_putchar, my_putstr


          La commande prend deux chaines en parametre.
          La commande common_str affiche le nombre de caracteres communs 
        a ces deux chaines. 
          C'est a dire le nombre d'occurences des caracteres qui se trouvent
        dans les deux chaines.
          On considerera qu'il n'y a aucun doublon dans aucun des parametres.


Exemple :
(jog@almarita)./common_str "kh~ xz" "o[ixhf vns" | cat -e
3$
(jog@almarita)

explication:
   {h, l'espace, x} sont communs aux deux parametres.
-------------------------------------------------------------------------------
Exercise 2 : common_str
__________________________
Executable name                 :       common_str
Directory name                  :       ex_2
Suggested time                  :       30 minutes
Allowed functions               :       my_putchar, my_putstr


          The command takes two strings as parameter.
          The command common_str displays the number of characters that
          are common to these two strings, that is to say the number of
          characters that can be found in both strings.
          Assume there are no doubles in the parameters.


Example :
(jog@almarita)./common_str "kh~ xz" "o[ixhf vns" | cat -e
3$
(jog@almarita)

Explanation:
   {h, the space, x} are common to both parameters.


------------------- ******** -------------------

Exercice 3 : infin_add
_______________________
Nom de l'executable  :          infin_add
Nom du repertoire    :          ex_3
Temps de realisation :          30 minutes.
Fonction autorisee   :          malloc, free, my_putstr, my_putchar, write
Makefile	     :		oui
Langage		     :		C


         Il s'agit de realiser un programme qui effectue une addition
         infinie. Ce programme prend en parametre deux chaines de carateres
         et ecrit une chaine de caractere qui est le resultat de l'operation
	 en sortie standard.

	 Il y a deux chaines passees en parametre.
         Ces trois chaines sont des nombres, la chaine affichee est le resultat
         de l'addition entre les deux chaines.
         Le resultat sera suivi d'un '\n'.
         Les nombres negatifs doivent etre precedes du signe "-".
         Le resultat doit etre affiche sans espace. Aucun zero ne doit
         preceder le nombre affiche.

         Un nombre negatif doit etre precede d'un et d'un seul signe.

         Tous les parametres seront bien formates.



exemple 1:
> ./infin_add "879879087" "67548976597" | cat -e
68428855684$
>



exemple 2:
> ./infin_add "-876435" "987143265" | cat -e
986266830$
>

exemple 3
> ./infin_add "-807965" "-34532" | cat -e
-842497
>
-------------------------------------------------------------------------------
Exercise 3 : infin_add
_______________________
Executable name      :          infin_add
Directory name       :          ex_3
Suggested time       :          30 minutes.
Allowed functions    :          malloc, free, my_putstr, my_putchar, write
Makefile             :          yes
Language             :          C

        You have to write a program that does an infinite addition.
        This program takes two strings and writes a string representing
        the result of the addition on the standard output.

        There are two strings as parameters.
        Both are numbers. The displayed string is the result of the addition
        of both these strings.
        The result will be followed by '\n'.
        Negative numbers have to be preceded by a '-'.
        The result must be displayed without spaces. No zeroes can precede
        the result.

        A negative number will be preceded by one and only one '-' sign.

        All parameters are valid.


Example 1:
> ./infin_add "879879087" "67548976597" | cat -e
68428855684$
>

Example 2:
> ./infin_add "-876435" "987143265" | cat -e
986266830$
>

Example 3
> ./infin_add "-807965" "-34532" | cat -e
-842497
>


------------------- ******** -------------------

Exercice 4 : ord_alphlong
------------------------
Nom de l'executable     :       ord_alphlong
Nom du repertoire       :       ex_4
temps de realisation    :       20 minutes.
Fonction autorisee      :       my_putchar, my_putnbr, my_putstr, malloc, free, write
Makefile		: 	oui



        Ecrire un programme qui prend en parametre une chaine de caracteres
        et qui affiche les mots de cette chaine par ordre de longueur puis
        dans l'ordre ascii. Les majuscules et minuscules sont identiques dans
        l'ordre alphabetique (bien regarder les exemples). En cas d'egalite
        alphabetique (ex aA et Aa) les mots doivent rester dans l'ordre
        ou ils etaient dans la chaine d'origine (dernier exemple).

        Si aucun parametre n'est transmis, ce programme renvoie '\n'.

	Dans les chaines, il n'y aura que des espaces, des tabulations
	et des caracteres alphanumeriques.

        Vous n'afficherez qu'un espace entre les mots. Aucun
        avant le premier ni apres le dernier de chaque ligne.


exemple 1:
(jog@almarita)./ord_alphlong "De son baton il frappa la pierre et l eau jaillit" | cat -e
l$
De et il la$
eau son$
baton$
frappa pierre$
jaillit$
(jog@almarita)

exemple 2:
(jog@almarita)./ord_alphlong "A a b B cc ca cd" | cat -e
A a b B$
ca cc cd$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 4 : ord_alphlong
------------------------
Executable name         :       ord_alphlong
Directory name          :       ex_4
Suggested time          :       20 minutes.
Allowed functions       :       my_putchar, my_putnbr, my_putstr, malloc, free, write
Makefile                :       yes


        Write a program that takes a string and displays all of its words,
        in length order, then ascii order. Upper and lowercase letters are
        identical in the alphabetical order (look at the examples carefully).
        In case of an alphabetical equivalence (ex aA and Aa), the words must
        remain in the order they were in the original string (last example).

        If no parameters are passed, the program writes '\n'.

        In the strings, there will only be spaces, tabulations and alphabetical
        characters.

        You will display only one space between words. None before the first or
        after the last of each line.


Example 1:
(jog@almarita)./ord_alphlong "De son baton il frappa la pierre et l eau jaillit" | cat -e
l$
De et il la$
eau son$
baton$
frappa pierre$
jaillit$
(jog@almarita)

Example 2:
(jog@almarita)./ord_alphlong "A a b B cc ca cd" | cat -e
A a b B$
ca cc cd$
(jog@almarita)


------------------- ******** -------------------

Exercice 5 : g-diam
__________________________

Nom de l'executable  :          g-diam
Nom du repertoire    :          ex_5
Temps de realisation :          30 minutes
Languages            :          C
Fonctions autorisees :          printf, malloc, free
Makefile             :          oui


        Le programme prend en parametre une chaine de caracteres.
        S'il n'y a pas de parametre, le programme affiche '\n'.
        Cette chaine est une suite de liens entre differentes cellules.
        Les liens sont separes par un espace.
        Ces cellules sont representees par des chiffres et les liens
        symbolises par '-'. Exemple:
        Si la cellule 2 est liee a la cellule 3, les representations seront
        les suivantes :
        soit - : "2-3".
        ou   - : "3-2".
        Cette chaine represente un graphe. Le programme devra afficher
        la longueur du plus long chemin de celui-ci.
        A savoir: Il est impossible de revenir en arriere. c'est-a-dire de
        utiliser une cellule plus d'une fois.
        Voir les exemples.

	Le Makefile est obligatoire meme si le programme est en PHP.
	Il est rappele que la moulinette effacera l'executable avant de faire
	make.


Exemple 1:
(jog@almarita)./g-diam "17-5 5-8 8-2 17-21 21-2 5-2 2-6 6-14 6-12 12-19 19-14 14-42" | cat -e
10$
(jog@almarita)

Exemple 2:
(jog@almarita)./g-diam "1-2 2-3 4-5 5-6 6-7 7-8 9-13 13-10 10-2 10-11 11-12 12-8 16-4 16-11 21-8 21-12 18-10 18-13 21-18" | cat -e
15$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 5 : g-diam
__________________________

Executable name      :          g-diam
Directory name       :          ex_5
Suggested time       :          30 minutes
Languages            :          C
Allowed functions    :          printf, malloc, free
Makefile             :          yes


        The program takes a string.
        If there is no parameter, the program displays '\n'.
        This string is a series of links between cells.
        Links are separated by spaces.
        These cells are represented by numbers and the links by '-'.
        Example:
        If the cell 2 is linked to the cell 3, representations will be :
        Either "2-3" or "3-2"
        This string represents a graph. The program must display the length
        of its longest path.
        It is not possible to go back, that is to say no cell can be used
        more than once. (See examples).

        The Makefile is mandatory even if the program is in PHP.
        The grading robot will delete the executable before running make.


Example 1:
(jog@almarita)./g-diam "17-5 5-8 8-2 17-21 21-2 5-2 2-6 6-14 6-12 12-19 19-14 14-42" | cat -e
10$
(jog@almarita)

Example 2:
(jog@almarita)./g-diam "1-2 2-3 4-5 5-6 6-7 7-8 9-13 13-10 10-2 10-11 11-12 12-8 16-4 16-11 21-8 21-12 18-10 18-13 21-18" | cat -e
15$
(jog@almarita)
