Details administratifs:

- Aucune forme de communication n'est permise.

	- Vous devez avoir votre carte d'etudiant. Vous devez la poser face visible
	  sur votre table

	- Ceci est un examen, il est interdit de discuter, ecouter de la musique,
	  faire du bruit, ou de produire toute autres nuisances pouvant deranger les
	  autres etudiants ou perturber le bon deroulement de l'examen

	- Vos telephones portables doivent etre eteints.
	
	- Il faudra utiliser le sous-repertoire "rendu" a la racine du compte,
	  il contiendra les repertoires aux noms demandes pour chaque
	  exercice.

	- Chaque exercice doit etre realise dans le repertoire correspondant au 
	  nom indique dans l'en-tete de chaque exercice.

	- Le repertoire "rendu", doit contenir un fichier nomme "auteur"
	  comprenant :
		le login (ex: jog) suivi d'un '\n'.
	  ce qui doit donner:

	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- C'est un programme qui s'occupe du ramassage, respectez les noms,
	  les chemins, les fichiers et les repertoires ...

	- LES DROITS DE VOS FICHIERS N'ONT AUCUNE IMPORTANCE, VOUS N'AVEZ DONC
	  PAS BESOIN DE LES CHANGER (SAUF SI ON VOUS LE DEMANDE DANS LE SUJET).
	
	- En cas de probleme technique avec le sujet, on ne doit s'adresser qu'au
	  surveillant uniquement.

	- Tout materiel non explicitement autorise est strictement interdit.

	- LES EXERCICES DOIVENT ETRE REALISES DANS L'ORDRE, la correction 
	  de l'examen s'arretera des qu'un exercice sera considere comme faux.

	- Toute sortie est definitive.


Le Code :

	- Des fonctions utiles sont parfois donnees dans le repertoire
	  ~/sujet/misc

	- Le releve du code est automatise, un programme testera le bon
	  fonctionnement des exercices.

	- Les fonctions autorisees sont indiquees dans l'en-tete de chaque 
	  exercice. Vous pouvez recoder toutes les fonctions a votre guise.

	- Toute fonction non autorisee explicitement est interdite.

	- Vous avez le droit a des feuilles blanches et un stylo.

	- Les exercices dit "subsidiaires" sont des exercices qui donnent des
	  points si vous avez fait les exercices qui les precedent.

	- Les exercices dit "bonus" sont des exercices qui donnent des points 
	  supplementaires meme si vous ne faites pas les exercices qui les 
	  precedent.

	- Pour toute question apres l'examen, creez un ticket sur l'intra-bocal
	  (http://intra-bocal.epitech.net), ou envoyez un mail a
	  contact@staff.epita.fr
-------------------------------------------------------------------------------
Administrative details:

- No communication of any kind is allowed.

	- You must have your student card. You must put it, face up, on your desk.

	- This is an exam, it is forbidden to talk, listen to music, make noise, or
	  produce any kind of nuisance that may disturb other students or prevent
	  this exam from running smoothly.

	- Your cell phones must be OFF.

	- You will have to use the "rendu" subdirectory at the root of your account,
	  which shall contain the directories named according to each exercise's
	  instructions.

	- Each exercise must be carried out in the directory mentioned in the
	  exercise's header.

	- The "rendu" subdirectory must contain a file named "auteur", containing:
	  the login (ex: jog) followed by a '\n'.

	  It should be so:
	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- The collection will be handled by a program, so you must respect the
	  names, paths, of all the files and directories...

	- RIGHTS OF YOUR FILES ARE OF NO CONSEQUENCE, YOU DO NOT HAVE TO CHANGE
	  THEM (EXCEPT IF THE SUBJECT ASKS YOU TO).

	- In case of a technical problem with the subject, you have to ask a
	  supervisor (and ONLY a supervisor).

	- Any equipment that is not explicitly allowed is strictly forbidden.

	- EXERCISES MUST BE CARRIED OUT IN ORDER. Grading will stop as soon as
	  an exercise is deemed false.

	- Any exit is definitive.


The code:

	- Useful functions are sometimes given in the ~/sujet/misc directory.

	- Collection of the code is automated, and a program will check that
	  your exercises work correctly.

	- Allowed functions are specified in each exercise's header. You can
	  re-code any function you like.

	- Any function not explicitly allowed is forbidden.

	- You have a right to blank sheets of paper and a pen.

	- "Subsidiary" exercises are exercises that give points if you have
	  done the previous exercises.

	- "Bonus" exercises are exercises that give bonus points even if you
	  haven't done the previous exercises.

	- For any question after the exam, create a ticket on the intra-bocal
	  (http://intra-bocal.epitech.net), or send a mail to
	  contact@staff.epita.fr

 ----------******------------*****------------******------------*****----------


------------------- ******** -------------------

Exercice 1 : sopipa
_______________________
Nom de l'executable	:       sopipa
Nom du repertoire	:       ex_1
Temps de realisation	:       40 minutes.
Fonction autorisee	:       toute la libc standard hormis system
Makefile		:	oui


      Le programme sopipa prend 4 parametres:
         ./sopipa file1 cmd1 cmd2 file2
      file1 et file2 sont des noms de fichiers.
      cmd1 et cmd2 sont des commandes shell avec leurs parametres.
      L'execution du programme sopipa a le meme effet que la commande
      shell suivante:
            < file1 cmd1 | cmd2 > file2

      Il n'est pas obligatoire de parser les arguments de sopipa.
      /bin/sh est autorise (pour executer cmd1 et cmd2 mais pas pour
      faire le pipe ni pour faire les redirections).
      Il est obligatoire d'utiliser le pipe, l'usage de fichiers temporaires
      est prohibe. Vous devez clairement creer le pipe et faire les
      2 redirection (l'exercice ne consiste pas a trouver les executables ni
      a decouper les parametres de cmd1 ou cmd2).


Exemples:
(jog@almarita) ./sopipa infile "ls -l" "wc -l" outfile
executera la meme chose que "< infile ls -l | wc -l > outfile" en sh

(jog@almarita) ./sopipa infile "grep a1" "wc -w" outfile
executera la meme chose que "< infile grep a1 | wc -w > outfile" en sh
-------------------------------------------------------------------------------
Exercise 1 : sopipa
_______________________
Executable name     :       sopipa
Directory name      :       ex_1
Suggested time      :       40 minutes.
Allowed functions   :       All the libc, except for system
Makefile            :       yes


        The program takes 4 parameters:
            ./sopipa file1 cmd1 cmd2 file2
        file1 and file2 are file names
        cmd1 and cmd2 are shell commands with their parameters
        The execution fo the program has the same effect as the
        following shell command :
            < file1 cmd1 | cmd2 > file2

        You do not have to parse the arguments of sopipa.
        /bin/sh is allowed (to execute cmd1 and cmd2, but not
        to make the pipe or the redirections).
        You HAVE to use pipe, temporary files are FORBIDDEN. You
        have to clearly make the pipe and make both redirections
        (the exercise is not about finding executables and parsing
        arguments ...)


Examples:
(jog@almarita) ./sopipa infile "ls -l" "wc -l" outfile
will do the same thing as "< infile ls -l | wc -l > outfile" in sh

(jog@almarita) ./sopipa infile "grep a1" "wc -w" outfile
will do the same thing as "< infile grep a1 | wc -w > outfile" in sh


------------------- ******** -------------------

Exercice 2 : hidenp
__________________________

Nom de l'executable  :          hidenp
Nom du repertoire    :          ex_2
temps de realisation :          15 minutes
Fonctions autorisees :          write
Makefile             :          oui


        Ecrire un programme qui prend en parametres deux chaines de
        caracteres et qui affiche:
	1 suivi de '\n',
	si la chaine du premier parametre est cachee dans la deuxieme chaine.
	Sinon il affichera:
	0 suivi de '\n'.
	Soit s1 et s2 des chaine de caracteres.
        On dit que la chaine s1 est cachee dans la chaine s2 si on peut
        trouver chaque caractere de s1 dans s2 et ce dans le meme ordre que
        dans s1.

        Ainsi:
		"fgex.;" est cachee dans "tyf34gdgf;'ektufjhgdgex.;.;rtjynur6"
		"abc" est cachee dans "2altrb53c.sse"
		"abc"  n'est pas cachee dans "btarc"

	Si il n'y a pas deux parametres, le programme affiche '\n'.


exemple 1:
(jog@almarita)./hidenp padinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
1$
(jog@almarita)


exemple 2:
(jog@almarita)./hidenp ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
0$
(jog@almarita)


exemple 3:
(jog@almarita)./hidenp "rien" "cette phrase ne cache rien" | cat -e
1$
(jog@almarita)


exemple 4:
(jog@almarita)./hidenp | cat -e
$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 2 : hidenp
__________________________

Executable name      :          hidenp
Directory name       :          ex_2
Suggested time       :          15 minutes
Allowed functions    :          write
Makefile             :          yes


        Write a program that takes two strings and displays:
            1 followed by '\n' is the first string is hidden in
            the second string,
            otherwise 0 followed by '\n'.

        Let s1 and s2 be strings.
        s1 is hidden in s2 if each character from s1 can be found in s2,
        in the same order as in s1.

        So:
        "fgex.;" is hidden in "tyf34gdgf;'ektufjhgdgex.;.;rtjynur6"
        "abc" is hidden in "2altrb53c.sse"
        "abc" is not hidden in "btarc"

        If there isn't two parameters, the program displays '\n'.


Example 1:
(jog@almarita)./hidenp padinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
1$
(jog@almarita)


Example 2:
(jog@almarita)./hidenp ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
0$
(jog@almarita)


Example 3:
(jog@almarita)./hidenp "rien" "cette phrase ne cache rien" | cat -e
1$
(jog@almarita)


Example 4:
(jog@almarita)./hidenp | cat -e
$
(jog@almarita)


------------------- ******** -------------------

Exercice 3 : inter
--------------------------
Nom de l'executable  :          inter
Nom du repertoire    :          ex_3
temps de realisation :          30 minutes.
Fonctions autorisees :          malloc, free.
Makefile             :          oui


        Ecrire un programme qui prend en parametre deux chaines de
        caractere et qui affiche sans doublon les caracteres communs au deux
	chaines.

	L'affichage se fera dans l'ordre d'apparition dans la premiere chaine.
	L'affichage doit etre suivi d'un '\n'.
	
	Si il n y a pas deux parametres le programme affiche '\n'.


exemple 1:
(jog@vault13) ./inter padinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
padinto$
(jog@vault13)


exemple 2:
(jog@vault13) ./inter ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
df6ewg4$
(jog@vault13)


exemple 3:
(jog@vault13) ./inter "rien" "cette phrase ne cache rien" | cat -e
rien$
(jog@vault13)


exemple 4:
(jog@vault13) ./inter | cat -e
$
(jog@vault13)
-------------------------------------------------------------------------------
Exercise 3 : inter
--------------------------
Executable name      :          inter
Directory name       :          ex_3
Suggested time       :          30 minutes.
Allowed functions    :          malloc, free.
Makefile             :          yes


        Write a program that takes two strings and displays, without
        doubles, the characters in common to both strings.

        The output will be in order of apparition in the first string.
        The output will be followed by a '\n'.

        If there is not two parameters the program writes '\n'.


Example 1:
(jog@vault13) ./inter padinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
padinto$
(jog@vault13)


Example 2:
(jog@vault13) ./inter ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
df6ewg4$
(jog@vault13)


Example 3:
(jog@vault13) ./inter "rien" "cette phrase ne cache rien" | cat -e
rien$
(jog@vault13)


Example 4:
(jog@vault13) ./inter | cat -e
$
(jog@vault13)


------------------- ******** -------------------

Exercice 4 :     magicsquare
___________________________
Nom du fichier          :       msquare
Nom du repertoire       :       ex_4
Makefile		:	oui
Langage			:	C
Fonctions autorisees	:	write, malloc, free
Temps de realisation    :       15 minutes.



         - Il s'agit de faire un programme qui complete et affiche le carre
	   magique de 3x3, en fonction des nombres n1 a n9 fournis.

	 - Un carre magique est un carre dont la somme des nombres de chaque
	   colone est egale a la somme des nombres de chaque ligne, et a la
	   somme des nombres de chaque diagonale.

	   Exemple:
	   8 1 6
	   3 5 7
	   4 9 2
	   est un carre magique ou la somme est 15 a chaque fois.

	 - Il sera apelle ainsi:
> ./msquare "n1 n2 n3 n4 n5 n6 n7 n8 n9"
	   ou les numeros correspondent a cela:
	   n1 n2 n3
	   n4 n5 n6
	   n7 n8 n9

	 - Vous devez utiliser un Makefile. Le binaire sera efface avant
	   compilation.

	 - Il faut gerer les chiffres de 1 a 9, si un nombre est egal a '?' on
	   doit completer cette case.

	 - Si il y a une solution, le programme affiche les 9
           nombres separes par des espaces suivi de "OK\n".
	   Sinon il affiche "KO\n".

         - Il ne faut afficher aucun caractere avant la representation du
           carre ni apres (hormis le OK\n).

	 - Le resultat serait donc:

(jog@almarita) ./msquare "8 1 6 ? 5 ? 4 9 ?" | cat -e
8 1 6 3 5 7 4 9 2 OK$
(jog@almarita) ./msquare "8 1 6 3 5 7 4 9 2" | cat -e
8 1 6 3 5 7 4 9 2 OK$
(jog@almarita) ./msquare "6 1 8 ? 5 ? 4 9 ?" | cat -e
KO$
(jog@almarita) ./msquare "6 1 8 3 5 7 4 9 2" | cat -e
KO$
(jog@almarita) ./msquare "3 4 5 2 8 7" | cat -e
KO$
(jog@almarita) ./msquare "3 1 5 7 9 8 2 0 4 5 6" | cat -e
KO$
(jog@almarita) ./msquare | cat -e
KO$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 4 :     magicsquare
___________________________
File name               :       msquare
Directory name          :       ex_4
Makefile                :       yes
Language                :       C
Allowed functions       :       write, malloc, free
Suggested time          :       15 minutes.



        You have to write a program that computes and display the 3x3 magic
        square corresponding to the n1 to n9 digits passed.

        A magic square is a square in which the sum of the numbers in each line
        is equal to the sum of the numbers in each column, and each diagonal.

        Example:
        8 1 6
        3 5 7
        4 9 2
        is a magic square where the sums are always equal to 15

        It will be called as follows:
        > ./msquare "n1 n2 n3 n4 n5 n6 n7 n8 n9"
        where numbers correspond to:
        n1 n2 n3
        n4 n5 n6
        n7 n8 n9

        You must use a Makefile. The executable will be removed before
        compilation.

        You must handle digits from 1 to 9. If a number is equal to '?' you
        must complete this cell.

        If there is a solution, the program displays the 9 numbers separated
        by a space followed by "OK\n".
        Otherwise it displays "KO\n".

        You must display nothing before or after the square (except for OK\n).


Example :
(jog@almarita) ./msquare "8 1 6 ? 5 ? 4 9 ?" | cat -e
8 1 6 3 5 7 4 9 2 OK$
(jog@almarita) ./msquare "8 1 6 3 5 7 4 9 2" | cat -e
8 1 6 3 5 7 4 9 2 OK$
(jog@almarita) ./msquare "6 1 8 ? 5 ? 4 9 ?" | cat -e
KO$
(jog@almarita) ./msquare "6 1 8 3 5 7 4 9 2" | cat -e
KO$
(jog@almarita) ./msquare "3 4 5 2 8 7" | cat -e
KO$
(jog@almarita) ./msquare "3 1 5 7 9 8 2 0 4 5 6" | cat -e
KO$
(jog@almarita) ./msquare | cat -e
KO$
(jog@almarita)


------------------- ******** -------------------

Exercice 5  : Algorithme du Message-Digest 5 (MD5)
________________________
Nom de l'executable	:	my_md5
Nom du repertoire       :	ex_5
Temps de realisation    :	15 minutes.
Langage	 		:	C
Fonctions autorisees    :	write
Makefile		:	oui



			Vous devez ecrire un programme qui prend en argument
			une chaine de caracteres de longueur quelconque et 
			qui affiche sur la sortie standard son "empreinte" ou
			"message-digest".
			La chaine affichee, le sera toujours en minuscule!
			Si aucun argument n'est passe au programme, celui-ci
			affiche '\n'.
			Ci-dessous se trouve la RFC correspondante.


(ali@baba)./my_md5 md5 | cat -e
1bc29b36f623ba82aaf6724fd3b16718$
(ali@baba)

Exemple 2:

(ali@baba)./my_md5 "La chaine qui suit represente un Message-Digest"
274fee17f4d7d7792dd1b1032b6bff7c
(ali@baba)

Exemple 3:

(ali@baba)./my_md5 "yag tse ehcihC"
6d87b481553714bab3e19de15be206c8
(ali@baba)

Exemple 4:

(ali@baba)./my_md5 "Ou est le message subliminal?" | cat -e
08a6fefb3589f7860e3f8184c7110dd4$
(ali@baba)

			-----------------------------

1. Executive Summary

   This document describes the MD5 message-digest algorithm. The
   algorithm takes as input a message of arbitrary length and produces
   as output a 128-bit "fingerprint" or "message digest" of the input.
   It is conjectured that it is computationally infeasible to produce
   two messages having the same message digest, or to produce any
   message having a given prespecified target message digest. The MD5
   algorithm is intended for digital signature applications, where a
   large file must be "compressed" in a secure manner before being
   encrypted with a private (secret) key under a public-key cryptosystem
   such as RSA.

   The MD5 algorithm is designed to be quite fast on 32-bit machines. In
   addition, the MD5 algorithm does not require any large substitution
   tables; the algorithm can be coded quite compactly.

   The MD5 algorithm is an extension of the MD4 message-digest algorithm
   1,2]. MD5 is slightly slower than MD4, but is more "conservative" in
   design. MD5 was designed because it was felt that MD4 was perhaps
   being adopted for use more quickly than justified by the existing
   critical review; because MD4 was designed to be exceptionally fast,
   it is "at the edge" in terms of risking successful cryptanalytic
   attack. MD5 backs off a bit, giving up a little in speed for a much
   greater likelihood of ultimate security. It incorporates some
   suggestions made by various reviewers, and contains additional
   optimizations. The MD5 algorithm is being placed in the public domain
   for review and possible adoption as a standard.

   For OSI-based applications, MD5's object identifier is

   md5 OBJECT IDENTIFIER ::=
     iso(1) member-body(2) US(840) rsadsi(113549) digestAlgorithm(2) 5}

   In the X.509 type AlgorithmIdentifier [3], the parameters for MD5
   should have type NULL.

2. Terminology and Notation

   In this document a "word" is a 32-bit quantity and a "byte" is an
   eight-bit quantity. A sequence of bits can be interpreted in a
   natural manner as a sequence of bytes, where each consecutive group
   of eight bits is interpreted as a byte with the high-order (most
   significant) bit of each byte listed first. Similarly, a sequence of
   bytes can be interpreted as a sequence of 32-bit words, where each
   consecutive group of four bytes is interpreted as a word with the
   low-order (least significant) byte given first.

   Let x_i denote "x sub i". If the subscript is an expression, we
   surround it in braces, as in x_{i+1}. Similarly, we use ^ for
   superscripts (exponentiation), so that x^i denotes x to the i-th
   power.

   Let the symbol "+" denote addition of words (i.e., modulo-2^32
   addition). Let X <<< s denote the 32-bit value obtained by circularly
   shifting (rotating) X left by s bit positions. Let not(X) denote the
   bit-wise complement of X, and let X v Y denote the bit-wise OR of X
   and Y. Let X xor Y denote the bit-wise XOR of X and Y, and let XY
   denote the bit-wise AND of X and Y.

3. MD5 Algorithm Description

   We begin by supposing that we have a b-bit message as input, and that
   we wish to find its message digest. Here b is an arbitrary
   nonnegative integer; b may be zero, it need not be a multiple of
   eight, and it may be arbitrarily large. We imagine the bits of the
   message written down as follows:

          m_0 m_1 ... m_{b-1}

   The following five steps are performed to compute the message digest
   of the message.

3.1 Step 1. Append Padding Bits

   The message is "padded" (extended) so that its length (in bits) is
   congruent to 448, modulo 512. That is, the message is extended so
   that it is just 64 bits shy of being a multiple of 512 bits long.
   Padding is always performed, even if the length of the message is
   already congruent to 448, modulo 512.

   Padding is performed as follows: a single "1" bit is appended to the
   message, and then "0" bits are appended so that the length in bits of
   the padded message becomes congruent to 448, modulo 512. In all, at
   least one bit and at most 512 bits are appended.

3.2 Step 2. Append Length

   A 64-bit representation of b (the length of the message before the
   padding bits were added) is appended to the result of the previous
   step. In the unlikely event that b is greater than 2^64, then only
   the low-order 64 bits of b are used. (These bits are appended as two
   32-bit words and appended low-order word first in accordance with the
   previous conventions.)

   At this point the resulting message (after padding with bits and with
   b) has a length that is an exact multiple of 512 bits. Equivalently,
   this message has a length that is an exact multiple of 16 (32-bit)
   words. Let M[0 ... N-1] denote the words of the resulting message,
   where N is a multiple of 16.

3.3 Step 3. Initialize MD Buffer

   A four-word buffer (A,B,C,D) is used to compute the message digest.
   Here each of A, B, C, D is a 32-bit register. These registers are
   initialized to the following values in hexadecimal, low-order bytes
   first):

          word A: 01 23 45 67
          word B: 89 ab cd ef
          word C: fe dc ba 98
          word D: 76 54 32 10

3.4 Step 4. Process Message in 16-Word Blocks

   We first define four auxiliary functions that each take as input
   three 32-bit words and produce as output one 32-bit word.

          F(X,Y,Z) = XY v not(X) Z
          G(X,Y,Z) = XZ v Y not(Z)
          H(X,Y,Z) = X xor Y xor Z
          I(X,Y,Z) = Y xor (X v not(Z))

   In each bit position F acts as a conditional: if X then Y else Z.
   The function F could have been defined using + instead of v since XY
   and not(X)Z will never have 1's in the same bit position.) It is
   interesting to note that if the bits of X, Y, and Z are independent
   and unbiased, the each bit of F(X,Y,Z) will be independent and
   unbiased.

   The functions G, H, and I are similar to the function F, in that they
   act in "bitwise parallel" to produce their output from the bits of X,
   Y, and Z, in such a manner that if the corresponding bits of X, Y,
   and Z are independent and unbiased, then each bit of G(X,Y,Z),
   H(X,Y,Z), and I(X,Y,Z) will be independent and unbiased. Note that
   the function H is the bit-wise "xor" or "parity" function of its
   inputs.

   This step uses a 64-element table T[1 ... 64] constructed from the
   sine function. Let T[i] denote the i-th element of the table, which
   is equal to the integer part of 4294967296 times abs(sin(i)), where i
   is in radians. The elements of the table are given in the appendix.

   Do the following:

   /* Process each 16-word block. */
   For i = 0 to N/16-1 do

     /* Copy block i into X. */
     For j = 0 to 15 do
       Set X[j] to M[i*16+j].
     end /* of loop on j */

     /* Save A as AA, B as BB, C as CC, and D as DD. */
     AA = A
     BB = B
     CC = C
     DD = D

     /* Round 1. */
     /* Let [abcd k s i] denote the operation
          a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s). */
     /* Do the following 16 operations. */
     [ABCD  0  7  1]  [DABC  1 12  2]  [CDAB  2 17  3]  [BCDA  3 22  4]
     [ABCD  4  7  5]  [DABC  5 12  6]  [CDAB  6 17  7]  [BCDA  7 22  8]
     [ABCD  8  7  9]  [DABC  9 12 10]  [CDAB 10 17 11]  [BCDA 11 22 12]
     [ABCD 12  7 13]  [DABC 13 12 14]  [CDAB 14 17 15]  [BCDA 15 22 16]

     /* Round 2. */
     /* Let [abcd k s i] denote the operation
          a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s). */
     /* Do the following 16 operations. */
     [ABCD  1  5 17]  [DABC  6  9 18]  [CDAB 11 14 19]  [BCDA  0 20 20]
     [ABCD  5  5 21]  [DABC 10  9 22]  [CDAB 15 14 23]  [BCDA  4 20 24]
     [ABCD  9  5 25]  [DABC 14  9 26]  [CDAB  3 14 27]  [BCDA  8 20 28]
     [ABCD 13  5 29]  [DABC  2  9 30]  [CDAB  7 14 31]  [BCDA 12 20 32]

     /* Round 3. */
     /* Let [abcd k s t] denote the operation
          a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). */
     /* Do the following 16 operations. */
     [ABCD  5  4 33]  [DABC  8 11 34]  [CDAB 11 16 35]  [BCDA 14 23 36]
     [ABCD  1  4 37]  [DABC  4 11 38]  [CDAB  7 16 39]  [BCDA 10 23 40]
     [ABCD 13  4 41]  [DABC  0 11 42]  [CDAB  3 16 43]  [BCDA  6 23 44]
     [ABCD  9  4 45]  [DABC 12 11 46]  [CDAB 15 16 47]  [BCDA  2 23 48]

     /* Round 4. */
     /* Let [abcd k s t] denote the operation
          a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */
     /* Do the following 16 operations. */
     [ABCD  0  6 49]  [DABC  7 10 50]  [CDAB 14 15 51]  [BCDA  5 21 52]
     [ABCD 12  6 53]  [DABC  3 10 54]  [CDAB 10 15 55]  [BCDA  1 21 56]
     [ABCD  8  6 57]  [DABC 15 10 58]  [CDAB  6 15 59]  [BCDA 13 21 60]
     [ABCD  4  6 61]  [DABC 11 10 62]  [CDAB  2 15 63]  [BCDA  9 21 64]

     /* Then perform the following additions. (That is increment each
        of the four registers by the value it had before this block
        was started.) */
     A = A + AA
     B = B + BB
     C = C + CC
     D = D + DD

   end /* of loop on i */

3.5 Step 5. Output

   The message digest produced as output is A, B, C, D. That is, we
   begin with the low-order byte of A, and end with the high-order byte
   of D.

   This completes the description of MD5. A reference implementation in
   C is given in the appendix.

4. Summary

   The MD5 message-digest algorithm is simple to implement, and provides
   a "fingerprint" or message digest of a message of arbitrary length.
   It is conjectured that the difficulty of coming up with two messages
   having the same message digest is on the order of 2^64 operations,
   and that the difficulty of coming up with any message having a given
   message digest is on the order of 2^128 operations. The MD5 algorithm
   has been carefully scrutinized for weaknesses. It is, however, a
   relatively new algorithm and further security analysis is of course
   justified, as is the case with any new proposal of this sort.

------------------- ******** -------------------
-------------------------------------------------------------------------------
Exercise 5  : Message-Digest 5 (MD5) algorithm
________________________
Executable name         :   my_md5
Directory name          :   ex_5
Suggested time          :   15 minutes.
Language                :   C
Allowed functions       :   write
Makefile                :   yes



        You must write a program that takes a string of any length
        and displays its "message-digest".
        The displayed string will always be in lowercase.
        If no argument is passed, the program displays '\n'.
        Below is the corresponding RFC.


Example 1:
(ali@baba)./my_md5 md5 | cat -e
1bc29b36f623ba82aaf6724fd3b16718$
(ali@baba)

Example 2:
(ali@baba)./my_md5 "La chaine qui suit represente un Message-Digest"
274fee17f4d7d7792dd1b1032b6bff7c
(ali@baba)

Example 3:
(ali@baba)./my_md5 "yag tse ehcihC"
6d87b481553714bab3e19de15be206c8
(ali@baba)

Example 4:
(ali@baba)./my_md5 "Ou est le message subliminal?" | cat -e
08a6fefb3589f7860e3f8184c7110dd4$
(ali@baba)

-----------------------------

1. Executive Summary

   This document describes the MD5 message-digest algorithm. The
   algorithm takes as input a message of arbitrary length and produces
   as output a 128-bit "fingerprint" or "message digest" of the input.
   It is conjectured that it is computationally infeasible to produce
   two messages having the same message digest, or to produce any
   message having a given prespecified target message digest. The MD5
   algorithm is intended for digital signature applications, where a
   large file must be "compressed" in a secure manner before being
   encrypted with a private (secret) key under a public-key cryptosystem
   such as RSA.

   The MD5 algorithm is designed to be quite fast on 32-bit machines. In
   addition, the MD5 algorithm does not require any large substitution
   tables; the algorithm can be coded quite compactly.

   The MD5 algorithm is an extension of the MD4 message-digest algorithm
   1,2]. MD5 is slightly slower than MD4, but is more "conservative" in
   design. MD5 was designed because it was felt that MD4 was perhaps
   being adopted for use more quickly than justified by the existing
   critical review; because MD4 was designed to be exceptionally fast,
   it is "at the edge" in terms of risking successful cryptanalytic
   attack. MD5 backs off a bit, giving up a little in speed for a much
   greater likelihood of ultimate security. It incorporates some
   suggestions made by various reviewers, and contains additional
   optimizations. The MD5 algorithm is being placed in the public domain
   for review and possible adoption as a standard.

   For OSI-based applications, MD5's object identifier is

   md5 OBJECT IDENTIFIER ::=
     iso(1) member-body(2) US(840) rsadsi(113549) digestAlgorithm(2) 5}

   In the X.509 type AlgorithmIdentifier [3], the parameters for MD5
   should have type NULL.

2. Terminology and Notation

   In this document a "word" is a 32-bit quantity and a "byte" is an
   eight-bit quantity. A sequence of bits can be interpreted in a
   natural manner as a sequence of bytes, where each consecutive group
   of eight bits is interpreted as a byte with the high-order (most
   significant) bit of each byte listed first. Similarly, a sequence of
   bytes can be interpreted as a sequence of 32-bit words, where each
   consecutive group of four bytes is interpreted as a word with the
   low-order (least significant) byte given first.

   Let x_i denote "x sub i". If the subscript is an expression, we
   surround it in braces, as in x_{i+1}. Similarly, we use ^ for
   superscripts (exponentiation), so that x^i denotes x to the i-th
   power.

   Let the symbol "+" denote addition of words (i.e., modulo-2^32
   addition). Let X <<< s denote the 32-bit value obtained by circularly
   shifting (rotating) X left by s bit positions. Let not(X) denote the
   bit-wise complement of X, and let X v Y denote the bit-wise OR of X
   and Y. Let X xor Y denote the bit-wise XOR of X and Y, and let XY
   denote the bit-wise AND of X and Y.

3. MD5 Algorithm Description

   We begin by supposing that we have a b-bit message as input, and that
   we wish to find its message digest. Here b is an arbitrary
   nonnegative integer; b may be zero, it need not be a multiple of
   eight, and it may be arbitrarily large. We imagine the bits of the
   message written down as follows:

          m_0 m_1 ... m_{b-1}

   The following five steps are performed to compute the message digest
   of the message.

3.1 Step 1. Append Padding Bits

   The message is "padded" (extended) so that its length (in bits) is
   congruent to 448, modulo 512. That is, the message is extended so
   that it is just 64 bits shy of being a multiple of 512 bits long.
   Padding is always performed, even if the length of the message is
   already congruent to 448, modulo 512.

   Padding is performed as follows: a single "1" bit is appended to the
   message, and then "0" bits are appended so that the length in bits of
   the padded message becomes congruent to 448, modulo 512. In all, at
   least one bit and at most 512 bits are appended.

3.2 Step 2. Append Length

   A 64-bit representation of b (the length of the message before the
   padding bits were added) is appended to the result of the previous
   step. In the unlikely event that b is greater than 2^64, then only
   the low-order 64 bits of b are used. (These bits are appended as two
   32-bit words and appended low-order word first in accordance with the
   previous conventions.)

   At this point the resulting message (after padding with bits and with
   b) has a length that is an exact multiple of 512 bits. Equivalently,
   this message has a length that is an exact multiple of 16 (32-bit)
   words. Let M[0 ... N-1] denote the words of the resulting message,
   where N is a multiple of 16.

3.3 Step 3. Initialize MD Buffer

   A four-word buffer (A,B,C,D) is used to compute the message digest.
   Here each of A, B, C, D is a 32-bit register. These registers are
   initialized to the following values in hexadecimal, low-order bytes
   first):

          word A: 01 23 45 67
          word B: 89 ab cd ef
          word C: fe dc ba 98
          word D: 76 54 32 10

3.4 Step 4. Process Message in 16-Word Blocks

   We first define four auxiliary functions that each take as input
   three 32-bit words and produce as output one 32-bit word.

          F(X,Y,Z) = XY v not(X) Z
          G(X,Y,Z) = XZ v Y not(Z)
          H(X,Y,Z) = X xor Y xor Z
          I(X,Y,Z) = Y xor (X v not(Z))

   In each bit position F acts as a conditional: if X then Y else Z.
   The function F could have been defined using + instead of v since XY
   and not(X)Z will never have 1's in the same bit position.) It is
   interesting to note that if the bits of X, Y, and Z are independent
   and unbiased, the each bit of F(X,Y,Z) will be independent and
   unbiased.

   The functions G, H, and I are similar to the function F, in that they
   act in "bitwise parallel" to produce their output from the bits of X,
   Y, and Z, in such a manner that if the corresponding bits of X, Y,
   and Z are independent and unbiased, then each bit of G(X,Y,Z),
   H(X,Y,Z), and I(X,Y,Z) will be independent and unbiased. Note that
   the function H is the bit-wise "xor" or "parity" function of its
   inputs.

   This step uses a 64-element table T[1 ... 64] constructed from the
   sine function. Let T[i] denote the i-th element of the table, which
   is equal to the integer part of 4294967296 times abs(sin(i)), where i
   is in radians. The elements of the table are given in the appendix.

   Do the following:

   /* Process each 16-word block. */
   For i = 0 to N/16-1 do

     /* Copy block i into X. */
     For j = 0 to 15 do
       Set X[j] to M[i*16+j].
     end /* of loop on j */

     /* Save A as AA, B as BB, C as CC, and D as DD. */
     AA = A
     BB = B
     CC = C
     DD = D

     /* Round 1. */
     /* Let [abcd k s i] denote the operation
          a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s). */
     /* Do the following 16 operations. */
     [ABCD  0  7  1]  [DABC  1 12  2]  [CDAB  2 17  3]  [BCDA  3 22  4]
     [ABCD  4  7  5]  [DABC  5 12  6]  [CDAB  6 17  7]  [BCDA  7 22  8]
     [ABCD  8  7  9]  [DABC  9 12 10]  [CDAB 10 17 11]  [BCDA 11 22 12]
     [ABCD 12  7 13]  [DABC 13 12 14]  [CDAB 14 17 15]  [BCDA 15 22 16]

     /* Round 2. */
     /* Let [abcd k s i] denote the operation
          a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s). */
     /* Do the following 16 operations. */
     [ABCD  1  5 17]  [DABC  6  9 18]  [CDAB 11 14 19]  [BCDA  0 20 20]
     [ABCD  5  5 21]  [DABC 10  9 22]  [CDAB 15 14 23]  [BCDA  4 20 24]
     [ABCD  9  5 25]  [DABC 14  9 26]  [CDAB  3 14 27]  [BCDA  8 20 28]
     [ABCD 13  5 29]  [DABC  2  9 30]  [CDAB  7 14 31]  [BCDA 12 20 32]

     /* Round 3. */
     /* Let [abcd k s t] denote the operation
          a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). */
     /* Do the following 16 operations. */
     [ABCD  5  4 33]  [DABC  8 11 34]  [CDAB 11 16 35]  [BCDA 14 23 36]
     [ABCD  1  4 37]  [DABC  4 11 38]  [CDAB  7 16 39]  [BCDA 10 23 40]
     [ABCD 13  4 41]  [DABC  0 11 42]  [CDAB  3 16 43]  [BCDA  6 23 44]
     [ABCD  9  4 45]  [DABC 12 11 46]  [CDAB 15 16 47]  [BCDA  2 23 48]

     /* Round 4. */
     /* Let [abcd k s t] denote the operation
          a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */
     /* Do the following 16 operations. */
     [ABCD  0  6 49]  [DABC  7 10 50]  [CDAB 14 15 51]  [BCDA  5 21 52]
     [ABCD 12  6 53]  [DABC  3 10 54]  [CDAB 10 15 55]  [BCDA  1 21 56]
     [ABCD  8  6 57]  [DABC 15 10 58]  [CDAB  6 15 59]  [BCDA 13 21 60]
     [ABCD  4  6 61]  [DABC 11 10 62]  [CDAB  2 15 63]  [BCDA  9 21 64]

     /* Then perform the following additions. (That is increment each
        of the four registers by the value it had before this block
        was started.) */
     A = A + AA
     B = B + BB
     C = C + CC
     D = D + DD

   end /* of loop on i */

3.5 Step 5. Output

   The message digest produced as output is A, B, C, D. That is, we
   begin with the low-order byte of A, and end with the high-order byte
   of D.

   This completes the description of MD5. A reference implementation in
   C is given in the appendix.

4. Summary

   The MD5 message-digest algorithm is simple to implement, and provides
   a "fingerprint" or message digest of a message of arbitrary length.
   It is conjectured that the difficulty of coming up with two messages
   having the same message digest is on the order of 2^64 operations,
   and that the difficulty of coming up with any message having a given
   message digest is on the order of 2^128 operations. The MD5 algorithm
   has been carefully scrutinized for weaknesses. It is, however, a
   relatively new algorithm and further security analysis is of course
   justified, as is the case with any new proposal of this sort.

------------------- ******** -------------------
