Details administratifs:

- Aucune forme de communication n'est permise.

	- Vous devez avoir votre carte d'etudiant. Vous devez la poser face visible
	  sur votre table

	- Ceci est un examen, il est interdit de discuter, ecouter de la musique,
	  faire du bruit, ou de produire toute autres nuisances pouvant deranger les
	  autres etudiants ou perturber le bon deroulement de l'examen

	- Vos telephones portables doivent etre eteints.
	
	- Il faudra utiliser le sous-repertoire "rendu" a la racine du compte,
	  il contiendra les repertoires aux noms demandes pour chaque
	  exercice.

	- Chaque exercice doit etre realise dans le repertoire correspondant au 
	  nom indique dans l'en-tete de chaque exercice.

	- Le repertoire "rendu", doit contenir un fichier nomme "auteur"
	  comprenant :
		le login (ex: jog) suivi d'un '\n'.
	  ce qui doit donner:

	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- C'est un programme qui s'occupe du ramassage, respectez les noms,
	  les chemins, les fichiers et les repertoires ...

	- LES DROITS DE VOS FICHIERS N'ONT AUCUNE IMPORTANCE, VOUS N'AVEZ DONC
	  PAS BESOIN DE LES CHANGER (SAUF SI ON VOUS LE DEMANDE DANS LE SUJET).
	
	- En cas de probleme technique avec le sujet, on ne doit s'adresser qu'au
	  surveillant uniquement.

	- Tout materiel non explicitement autorise est strictement interdit.

	- LES EXERCICES DOIVENT ETRE REALISES DANS L'ORDRE, la correction 
	  de l'examen s'arretera des qu'un exercice sera considere comme faux.

	- Toute sortie est definitive.


Le Code :

	- Des fonctions utiles sont parfois donnees dans le repertoire
	  ~/sujet/misc

	- Le releve du code est automatise, un programme testera le bon
	  fonctionnement des exercices.

	- Les fonctions autorisees sont indiquees dans l'en-tete de chaque 
	  exercice. Vous pouvez recoder toutes les fonctions a votre guise.

	- Toute fonction non autorisee explicitement est interdite.

	- Vous avez le droit a des feuilles blanches et un stylo.

	- Les exercices dit "subsidiaires" sont des exercices qui donnent des
	  points si vous avez fait les exercices qui les precedent.

	- Les exercices dit "bonus" sont des exercices qui donnent des points 
	  supplementaires meme si vous ne faites pas les exercices qui les 
	  precedent.

	- Pour toute question apres l'examen, creez un ticket sur l'intra-bocal
	  (http://intra-bocal.epitech.net), ou envoyez un mail a
	  contact@staff.epita.fr
-------------------------------------------------------------------------------
Administrative details:

- No communication of any kind is allowed.

	- You must have your student card. You must put it, face up, on your desk.

	- This is an exam, it is forbidden to talk, listen to music, make noise, or
	  produce any kind of nuisance that may disturb other students or prevent
	  this exam from running smoothly.

	- Your cell phones must be OFF.

	- You will have to use the "rendu" subdirectory at the root of your account,
	  which shall contain the directories named according to each exercise's
	  instructions.

	- Each exercise must be carried out in the directory mentioned in the
	  exercise's header.

	- The "rendu" subdirectory must contain a file named "auteur", containing:
	  the login (ex: jog) followed by a '\n'.

	  It should be so:
	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- The collection will be handled by a program, so you must respect the
	  names, paths, of all the files and directories...

	- RIGHTS OF YOUR FILES ARE OF NO CONSEQUENCE, YOU DO NOT HAVE TO CHANGE
	  THEM (EXCEPT IF THE SUBJECT ASKS YOU TO).

	- In case of a technical problem with the subject, you have to ask a
	  supervisor (and ONLY a supervisor).

	- Any equipment that is not explicitly allowed is strictly forbidden.

	- EXERCISES MUST BE CARRIED OUT IN ORDER. Grading will stop as soon as
	  an exercise is deemed false.

	- Any exit is definitive.


The code:

	- Useful functions are sometimes given in the ~/sujet/misc directory.

	- Collection of the code is automated, and a program will check that
	  your exercises work correctly.

	- Allowed functions are specified in each exercise's header. You can
	  re-code any function you like.

	- Any function not explicitly allowed is forbidden.

	- You have a right to blank sheets of paper and a pen.

	- "Subsidiary" exercises are exercises that give points if you have
	  done the previous exercises.

	- "Bonus" exercises are exercises that give bonus points even if you
	  haven't done the previous exercises.

	- For any question after the exam, create a ticket on the intra-bocal
	  (http://intra-bocal.epitech.net), or send a mail to
	  contact@staff.epita.fr

 ----------******------------*****------------******------------*****----------


------------------- ******** -------------------

Exercice 1 : rev_wstr
_______________________
Nom de l'executable  	:	rev_wstr
Nom du repertoire    	:	ex_1
Temps de realisation 	:	20 minutes
Language		:	C
Fonctions autorisees   	:	write
Makefile		:	oui


        Ecrire un programme qui prend en parametre une chaine de caracteres
        et qui affiche cette chaine en inversant ses mots.
        Le dernier mot se retrouve en premier, l'avant dernier en deuxieme 
	etc....

	On appel mot une chaine de caracteres separee par soit des espaces, soit par
	des tabulations, soit le debut de la chaine ou la fin de la chaine.	

        Si aucun parametre n'est transmis, le programme affiche un "\n".
	NB: il ne devra en sortie n'y avoir qu'un seul espace entre chaque mots,
	pas d'espace au debut, pas d'espace a la fin.


exemple 1:
(jog@almarita) ./rev_wstr "le temps du mepris precede celui de l'indifference" | cat -e
l'indifference de celui precede mepris du temps le$
(jog@almarita)

exemple 2:
(jog@almarita) ./rev_wstr "abcdefghijklm"
abcdefghijklm
(jog@almarita)

exemple 3
(jog@almarita) ./rev_wstr "il contempla le mont"
mont le contempla il
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 1 : rev_wstr
_______________________
Executable name         :   rev_wstr
Directory name          :   ex_1
Suggested time          :   20 minutes
Language                :   C
Allowed functions       :   write
Makefile                :   yes

        Write a program that takes a string and displays it after
        reversing its words.
        The last word becomes the first, the second to last the second, etc ...

        A word is a string separated either by spaces, tabulations, the start or
        the end of the string.

        If no parameters are passed, the program displays '\n'.
        NB: There will be only one space between each word in the output, and
        no spaces at the start or the end.


Example 1:
(jog@almarita) ./rev_wstr "le temps du mepris precede celui de l'indifference" | cat -e
l'indifference de celui precede mepris du temps le$
(jog@almarita)

Example 2:
(jog@almarita) ./rev_wstr "abcdefghijklm"
abcdefghijklm
(jog@almarita)

Example 3
(jog@almarita) ./rev_wstr "il contempla le mont"
mont le contempla il
(jog@almarita)


------------------- ******** -------------------

Exercice 2 : union
--------------------------
Nom de l'executable  :          union
Nom du repertoire    :          ex_2
Temps de realisation :          30 minutes.
Fonctions autorisees :          write
Makefile             :          oui


        Ecrire un programme qui prend en parametre deux chaines de
        caracteres et qui affiche sans doublon les caracteres qui apparaissent
	dans l'une ou dans l'autre.

	L'affichage se fera dans l'ordre d'apparition dans la ligne de
	commande.

	L'affichage doit etre suivi d'un '\n'.
	
	Si il n y a pas deux parametres le programme affiche '\n'.


exemple 1:
(jog@almarita)./union zpadinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
zpadintoqefwjy$
(jog@almarita)


exemple 2:
(jog@almarita)./union ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
df6vewg4thras$
(jog@almarita)


exemple 3:
(jog@almarita)./union "rien" "cette phrase ne cache rien" | cat -e
rienct phas$
(jog@almarita)


exemple 4:
(jog@almarita)./union | cat -e
$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 2 : union
--------------------------
Executable name      :          union
Directory name       :          ex_2
Suggested time       :          30 minutes.
Allowed functions    :          write
Makefile             :          yes


        Write a program that takes two strings and displays, without doubles,
        the characters that appear in one or the other.

        The output will be in order of apparition in the command line.

        The output will be followed by a '\n'.

        If there isn't two parameters, display a '\n'.


Example 1:
(jog@almarita)./union zpadinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
zpadintoqefwjy$
(jog@almarita)


Example 2:
(jog@almarita)./union ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
df6vewg4thras$
(jog@almarita)


Example 3:
(jog@almarita)./union "rien" "cette phrase ne cache rien" | cat -e
rienct phas$
(jog@almarita)


Example 4:
(jog@almarita)./union | cat -e
$
(jog@almarita)


------------------- ******** -------------------

Exercice 3 : atoi_base
___________________________
Nom du fichier          :       my_atoi_base.c
Nom du repertoire       :       ex_3
Temps de realisation    :       30 minutes.



         - Voici le prototype de la fonction:

int             my_atoi_base(char *str, char *base);

         - Il s'agit de faire une fonction C qui renvoi un nombre decimal
           dans une base donn	e en parametre.

         - vous devez gerer les nombres entre -((2^31)-1) et (2^31)-1 inclus.

         - vous ne devez pas mettre dans le my_atoi_base.c les fonctions :
           my_printnbr ni my_printchar

         - Exemple de main.c:


void             main(void)
{
  my_printnbr(my_atoi_base("2a", "0123456789abcdef"));
  my_printchar('\n');
  my_printnbr(my_atoi_base("101010", "01"));
  my_printchar('\n');
  my_printnbr(my_atoi_base("52", "01234567"));
  my_printchar('\n');
}

le resultat serait donc:
> cc main.c my_atoi_base.c
> ./a.out
42
42
42
>
-------------------------------------------------------------------------------
Exercise 3 : atoi_base
___________________________
File name               :       my_atoi_base.c
Directory name          :       ex_3
Suggested time          :       30 minutes.



        Here is the prototype of the function:

int             my_atoi_base(char *str, char *base);

        You have to make a C function that returns a decimal number from the
        base passed as parameter.

        You must handle numbers between -((2^31)-1) and (2^31)-1 included.

        You must put neither my_printnbr xor my_printchar in the my_atoi_base.c
        file.

        Example of main.c:

void             main(void)
{
  my_printnbr(my_atoi_base("2a", "0123456789abcdef"));
  my_printchar('\n');
  my_printnbr(my_atoi_base("101010", "01"));
  my_printchar('\n');
  my_printnbr(my_atoi_base("52", "01234567"));
  my_printchar('\n');
}

The result would be:
> cc main.c my_atoi_base.c
> ./a.out
42
42
42
>


------------------- ******** -------------------

Exercice 4 : sort_word
_______________________
Nom de l'executable     :       sort_word
Nom du repertoire       :       ex_4
Temps de realisation    :       20 minutes.
Fonction autorisee      :       my_putchar, my_putstr, malloc, free.
Makefile		:	oui


        Ecrire un programme qui prend en parametre une chaine de caracteres
        et qui affiche les mots de cette chaine par ordre alphabetique.

        Les majuscules et minuscules sont trautees comme identiques
        dans l'ordre alphabetique.

        Si aucun parametre n'est transmis, ce programme affiche '\n'

        On n'affichera qu'un seul separateur entre les mots.


exemple 1:
(jog@vault13) ./sort_word "Comme pour lui il est possible de prendre des nombres a virgule" |cat -e
a Comme de des est il lui nombres possible pour prendre virgule



exemple 2:
(jog@vault13) ./sort_word "A a b B cc ca cd" | cat -e
A a b B ca cc cd$
(jog@vault13)


exemple 3
(jog@vault13) ./sort_word "Mon programme fait Segfault encore une fois" | cat -e
encore fait fois Mon programme Segfault une$
(jog@vault13)


exemple 4
(jog@vault13) ./sort_word | cat -e
$
(jog@vault13)
-------------------------------------------------------------------------------
Exercise 4 : sort_word
_______________________
Executable name         :       sort_word
Directory name          :       ex_4
Suggested time          :       20 minutes.
Allowed functions       :       my_putchar, my_putstr, malloc, free.
Makefile                :       yes


        Write a program that takes a string and displays its words
        in alphabetical order.

        Lower and upper case are identical in alphabetical order.

        If no parameters are passed, the program writes '\n'.

        You will display only one separator between words.


Example 1:
(jog@vault13) ./sort_word "Comme pour lui il est possible de prendre des nombres a virgule" |cat -e
a Comme de des est il lui nombres possible pour prendre virgule



Example 2:
(jog@vault13) ./sort_word "A a b B cc ca cd" | cat -e
A a b B ca cc cd$
(jog@vault13)


Example 3
(jog@vault13) ./sort_word "Mon programme fait Segfault encore une fois" | cat -e
encore fait fois Mon programme Segfault une$
(jog@vault13)


Example 4
(jog@vault13) ./sort_word | cat -e
$
(jog@vault13)


------------------- ******** -------------------

Exercice 5 : g-nbr-ilots
__________________________

Nom de l'executable  :          g-nbr-ilots
Nom du repertoire    :          ex_5
temps de realisation :          30 minutes.
Fonctions autorisees :          write, printf, malloc, free.
Languages            :          C
Executable           :          oui
Makefile	     :		oui

        Le programme prend en parametre une chaine de carateres.
        S'il n'y a pas de parametre, ce programme affichera '\n'.
        Cette chaine est une suite de liens entre differentes cellules.
        Les liens sont separes par un espace.
        Ces cellules sont representees par des chiffres et les liens
        symbolises par '-'. Exemple:
        Si la cellule 2 est liee a la cellule 3, les representations seront
        les suivantes :
        soit - : "2-3".
        ou   - : "3-2".
        Cette chaine represente un graphe. Le programme devra afficher
        le nombre d'ilots que forme ce graphe suivi de '\n'.
        Un ilot est un ensemble de cellules liees entre elles seulement.
        Voir les exemples.

	Le Makefile est obligatoire. Meme si c'est pour faire un cp.
	Respecter le nom de l'executable.


Exemple 1:
(jog@almarita) ./g-nbr-ilots "2-8 42-7 6-12 21-17 19-14 5-8 12-19 14-6" | cat -e
4$
(jog@almarita)

Exemple 1:
(jog@almarita) ./g-nbr-ilots "2-8 42-7 6-12 21-17 19-14 5-8 12-19 14-6 5-17 7-6" | cat -e
2$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 5 : g-nbr-ilots
__________________________

Executable name      :          g-nbr-ilots
Directory name       :          ex_5
Suggested time       :          30 minutes.
Allowed functions    :          write, printf, malloc, free.
Languages            :          C
Makefile             :          yes

        The program takes a string.
        If there is no parameter, the program displays '\n'.
        This string is a series of links between cells.
        Links are separated by spaces.
        These cells are represented by numbers and the links by '-'.
        Example:
        If the cell 2 is linked to the cell 3, representations will be :
        Either "2-3" or "3-2"
        This string represents a graph. The program must display number
        of islands in this graph followed by '\n'.
        An island is a set of cells linked only between them. See examples.

        The Makefile is mandatory even if the program is in PHP.
        The grading robot will delete the executable before running make.


Example 1:
(jog@almarita) ./g-nbr-ilots "2-8 42-7 6-12 21-17 19-14 5-8 12-19 14-6" | cat -e
4$
(jog@almarita)

Example 1:
(jog@almarita) ./g-nbr-ilots "2-8 42-7 6-12 21-17 19-14 5-8 12-19 14-6 5-17 7-6" | cat -e
2$
(jog@almarita)

