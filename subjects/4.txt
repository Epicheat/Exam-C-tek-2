Details administratifs:

- Aucune forme de communication n'est permise.

	- Vous devez avoir votre carte d'etudiant. Vous devez la poser face visible
	  sur votre table

	- Ceci est un examen, il est interdit de discuter, ecouter de la musique,
	  faire du bruit, ou de produire toute autres nuisances pouvant deranger les
	  autres etudiants ou perturber le bon deroulement de l'examen

	- Vos telephones portables doivent etre eteints.
	
	- Il faudra utiliser le sous-repertoire "rendu" a la racine du compte,
	  il contiendra les repertoires aux noms demandes pour chaque
	  exercice.

	- Chaque exercice doit etre realise dans le repertoire correspondant au 
	  nom indique dans l'en-tete de chaque exercice.

	- Le repertoire "rendu", doit contenir un fichier nomme "auteur"
	  comprenant :
		le login (ex: jog) suivi d'un '\n'.
	  ce qui doit donner:

	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- C'est un programme qui s'occupe du ramassage, respectez les noms,
	  les chemins, les fichiers et les repertoires ...

	- LES DROITS DE VOS FICHIERS N'ONT AUCUNE IMPORTANCE, VOUS N'AVEZ DONC
	  PAS BESOIN DE LES CHANGER (SAUF SI ON VOUS LE DEMANDE DANS LE SUJET).
	
	- En cas de probleme technique avec le sujet, on ne doit s'adresser qu'au
	  surveillant uniquement.

	- Tout materiel non explicitement autorise est strictement interdit.

	- LES EXERCICES DOIVENT ETRE REALISES DANS L'ORDRE, la correction 
	  de l'examen s'arretera des qu'un exercice sera considere comme faux.

	- Toute sortie est definitive.


Le Code :

	- Des fonctions utiles sont parfois donnees dans le repertoire
	  ~/sujet/misc

	- Le releve du code est automatise, un programme testera le bon
	  fonctionnement des exercices.

	- Les fonctions autorisees sont indiquees dans l'en-tete de chaque 
	  exercice. Vous pouvez recoder toutes les fonctions a votre guise.

	- Toute fonction non autorisee explicitement est interdite.

	- Vous avez le droit a des feuilles blanches et un stylo.

	- Les exercices dit "subsidiaires" sont des exercices qui donnent des
	  points si vous avez fait les exercices qui les precedent.

	- Les exercices dit "bonus" sont des exercices qui donnent des points 
	  supplementaires meme si vous ne faites pas les exercices qui les 
	  precedent.

	- Pour toute question apres l'examen, creez un ticket sur l'intra-bocal
	  (http://intra-bocal.epitech.net), ou envoyez un mail a
	  contact@staff.epita.fr
-------------------------------------------------------------------------------
Administrative details:

- No communication of any kind is allowed.

	- You must have your student card. You must put it, face up, on your desk.

	- This is an exam, it is forbidden to talk, listen to music, make noise, or
	  produce any kind of nuisance that may disturb other students or prevent
	  this exam from running smoothly.

	- Your cell phones must be OFF.

	- You will have to use the "rendu" subdirectory at the root of your account,
	  which shall contain the directories named according to each exercise's
	  instructions.

	- Each exercise must be carried out in the directory mentioned in the
	  exercise's header.

	- The "rendu" subdirectory must contain a file named "auteur", containing:
	  the login (ex: jog) followed by a '\n'.

	  It should be so:
	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- The collection will be handled by a program, so you must respect the
	  names, paths, of all the files and directories...

	- RIGHTS OF YOUR FILES ARE OF NO CONSEQUENCE, YOU DO NOT HAVE TO CHANGE
	  THEM (EXCEPT IF THE SUBJECT ASKS YOU TO).

	- In case of a technical problem with the subject, you have to ask a
	  supervisor (and ONLY a supervisor).

	- Any equipment that is not explicitly allowed is strictly forbidden.

	- EXERCISES MUST BE CARRIED OUT IN ORDER. Grading will stop as soon as
	  an exercise is deemed false.

	- Any exit is definitive.


The code:

	- Useful functions are sometimes given in the ~/sujet/misc directory.

	- Collection of the code is automated, and a program will check that
	  your exercises work correctly.

	- Allowed functions are specified in each exercise's header. You can
	  re-code any function you like.

	- Any function not explicitly allowed is forbidden.

	- You have a right to blank sheets of paper and a pen.

	- "Subsidiary" exercises are exercises that give points if you have
	  done the previous exercises.

	- "Bonus" exercises are exercises that give bonus points even if you
	  haven't done the previous exercises.

	- For any question after the exam, create a ticket on the intra-bocal
	  (http://intra-bocal.epitech.net), or send a mail to
	  contact@staff.epita.fr

 ----------******------------*****------------******------------*****----------


------------------- ******** -------------------
source 
Exercice 1 : conv_nbr
__________________________

Nom de l'executable  :          conv_nbr
Nom du repertoire    :          ex_1
Temps de realisation :          35 minutes.
Fonction autorisees  :          printf, write
Makefile             :          oui


         Le programme prend en parametre trois
         chaines de caractere: nbr, baseD et baseA.
         Le programme respecte le synopsys suivant:
                  ./conv_nbr "nbr" "baseD"  "baseA"
         conv_nbr convertit nbr de la base baseD a la base baseA et affiche
         la chaine resultat sur la sortie standard.

         Ce programme doit gerer les nombres negatifs.
         Ainsi que les entiers de (-2^31) a (2^31)-1.

         nbr est bien la representation d'un nombre dans la baseD.
         baseA et baseD sont des bases valides:
               - pas de doublon
               - au moins 2 digits.

         On peut utiliser comme digits de la base, tous caracteres affichables.
         Il ne peut y avoir qu'un seul signe '-' .
         zero (0) est positif.

(jog@almarita)./conv_nbr 123 0123456789 01 | cat -e
1111011$
(jog@almarita)

(jog@almarita)./conv_nbr 1111011 01 0123456789 | cat -e
123$
(jog@almarita)

(jog@almarita)./conv_nbr -123 0123456789 0123456789ABCDEF | cat -e
-7B$
(jog@almarita)

(jog@almarita)./conv_nbr -123 0123456789 0123456789 | cat -e
-123$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 1 : conv_nbr
__________________________

Executable name      :          conv_nbr
Directory name       :          ex_1
Suggested time       :          35 minutes.
Allowed functions    :          printf, write
Makefile             :          yes


         The program takes three strings as parameters :
         nbr, baseB and baseA
         The program respects the following synopsis:
                  ./conv_nbr "nbr" "baseD" "baseA"
         conv_nbr converts nbr from base baseD to base baseA and displays
         the resulting string on the standard output.

         This program must handle negative numbers, and integers
         from (-2^31) to (2^31)-1.

         nbr is the representation of a number in base baseD.
         baseA and baseD are valid bases:
               - no doubles
               - at least 2 digits

         A digit can be any printable character.
         There can be only one '-' sign.
         zero (0) is positive.


(jog@almarita)./conv_nbr 123 0123456789 01 | cat -e
1111011$
(jog@almarita)

(jog@almarita)./conv_nbr 1111011 01 0123456789 | cat -e
123$
(jog@almarita)

(jog@almarita)./conv_nbr -123 0123456789 0123456789ABCDEF | cat -e
-7B$
(jog@almarita)

(jog@almarita)./conv_nbr -123 0123456789 0123456789 | cat -e
-123$
(jog@almarita)


------------------- ******** -------------------

Exercice 2  : my_id
________________________
Nom des fichiers	:       my_id
Nom du repertoire       :       ex_2
Temps de realisation    :       15 minutes.
Languages		:	C
Fonctions autorisees    :       toutes sauf l'utilisation sauf system, exec*, et du binaire "id"
				de facon direct ou indirect
Makefile		:	oui



	Vous devez ecrire un programme qui prend en argument un uid ou un
	login, et renvoie EXACTEMENT, au caractere pret, la meme chose que la commande id.
	Vous ne devez pas gerer les options.

exemple 1:
(jog@almarita)./my_id anonymous
uid=3092(anonymous) gid=7000(ext) groups=7000(ext)$
(jog@almarita)

exemple 2:
(jog@almarita)./my_id | cat -e
uid=4200(jog) gid=4200(bocal) groups=4200(bocal)$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 2  : my_id
________________________
File name               :       my_id
Directory name          :       ex_2
Suggested time          :       15 minutes.
Language                :       C
Allowed functions       :       everything except system, exec* and the "id" executable,
                                directly or indirectly
Makefile                :       yes


    You must write a program that takes an uid or a login, and returns EXACTLY
    the same thing as the id command.
    You must not handle options.


Example 1:
(jog@almarita)./my_id anonymous
uid=3092(anonymous) gid=7000(ext) groups=7000(ext)$
(jog@almarita)

Example 2:
(jog@almarita)./my_id | cat -e
uid=4200(jog) gid=4200(bocal) groups=4200(bocal)$
(jog@almarita)



------------------- ******** -------------------

Exercice 3 : rostring
_______________________
Nom de l'executable  :          rostring
Nom du repertoire    :          ex_3
Temps de realisation :          20 minutes.
Fonction autorisee   :          my_putchar.
Makefile	     :		oui


        Ecrire un programme qui prend en parametres une chaine de caracteres
        et qui affiche cette chaine en procedant a une rotation de celle-ci
        de droite a gauche.
        Ainsi le premier mot se retrouve le dernier et l'ordre des autres
        n'est pas modifies.
	Les mots sont des chaines de caracteres separees par des espaces et/ou
	des tabulations.
        Les mots sont affiches separes par un seul et
        unique espace.
        L'affichage sera suivie d'un \n.


exemple 1:
(jog@almarita) ./rostring "abc   " | cat -e
abc$
(jog@almarita)

exemple 2:
(jog@almarita) ./rostring "Que la      lumiere soit et la lumiere fut"
la lumiere soit et la lumiere fut Que
(jog@almarita)

exemple 3:
(jog@almarita) ./rostring "     AkjhZ zLKIJz , 23y"
zLKIJz , 23y AkjhZ
(jog@almarita)

exemple 3:
(jog@almarita) ./rostring | cat -e
$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 3 : rostring
_______________________
Executable name      :          rostring
Directory name       :          ex_3
Suggested time       :          20 minutes.
Allowed functions    :          my_putchar.
Makefile             :          yes


        Write a program that takes a string and displays it after doing
        a right to left rotation.
        So, the first word becomes the last and the order of the words is
        not modified.
        Words are strings separated by spaces or tabulations.
        Words will be displayed separated by only one space.
        The output will be followed by a '\n'.


Example 1:
(jog@almarita) ./rostring "abc   " | cat -e
abc$
(jog@almarita)

Example 2:
(jog@almarita) ./rostring "Que la      lumiere soit et la lumiere fut"
la lumiere soit et la lumiere fut Que
(jog@almarita)

Example 3:
(jog@almarita) ./rostring "     AkjhZ zLKIJz , 23y"
zLKIJz , 23y AkjhZ
(jog@almarita)

Example 3:
(jog@almarita) ./rostring | cat -e
$
(jog@almarita)



------------------- ******** -------------------

Exercice 4 : infin_mult
_______________________
Nom de l'executable  :          infin_mult
Nom du repertoire    :          ex_4
Temps de realisation :          40 minutes.
Fonction autorisee   :          malloc, free, my_putstr, my_putchar, write
Makefile	     :		oui


         Il s'agit de realiser un programme qui effectue une multiplication
         infini. Ce programme prend en parametre deux chaines de carateres
         et ecrit une chaine de caractere qui est le resultat de l'operation
	 en sortie standart.

	 Il y a deux chaines passees en parametre.
         Ces trois chaines sont des nombres, la chaine affichee est le resultat
         du produit entre les deux chaines passees arguments.
         Le resultat sera suivie d'un '\n'.
         Les nombres negatifs doivent etre precedes du signe "-".
         Le resultat doit etre affiche sans espace. Aucun zero ne doit
         preceder le nombre affiche.

         Un nombre negatif doit etre precede d'un et d'un seul signe.

         Tous les parametres seront bien formates.



exemple 1:
> ./infin_mult "879879087" "67548976597" | cat -e
59434931855952726939$
>



exemple 2:
> ./infin_mult "-876435" "987143265" | cat -e
-865166907460275$
>

exemple 3
> ./infin_mult "-807965" "-34532" | cat -e
27900647380$
>
-------------------------------------------------------------------------------
Exercise 4 : infin_mult
_______________________
Executable name      :          infin_mult
Directory name       :          ex_4
Suggested time       :          40 minutes.
Allowed functions    :          malloc, free, my_putstr, my_putchar, write
Makefile             :          yes


        You have to write a program that does an infinite product.
        This program takes two strings and writes a string representing
        the result of the product on the standard output.

        There are two strings as parameters.
        Both are numbers. The displayed string is the result of the product
        of both these strings.
        The result will be followed by '\n'.
        Negative numbers have to be preceded by a '-'.
        The result must be displayed without spaces. No zeroes can precede
        the result.

        A negative number will be preceded by one and only one '-' sign.

        All parameters are valid.


Example 1:
> ./infin_mult "879879087" "67548976597" | cat -e
59434931855952726939$
>

Example 2:
> ./infin_mult "-876435" "987143265" | cat -e
-865166907460275$
>

Example 3
> ./infin_mult "-807965" "-34532" | cat -e
27900647380$
>


------------------- ******** -------------------

Exercice 5 : count_island
------------------------
Nom de l'executable     :       count_island
Nom du repertoire       :       ex_5
temps de realisation    :       30 minutes.
Fonction autorisee      :       read, write, open, close, malloc, free
Makefile		: 	oui



        Le programme prend en parametre un fichier contenant une serie de
	lignes de longueurs egales contenant soit le caractere '.' soit le
	caractere 'X'. Ces lignes forment un rectangle de '.' comportant des
	ilots de 'X'.
	Une ligne est une suite de caracteres '.' et de caracteres 'X' qui se
	termine par un '\n'. Les lignes font toutes la meme taille. La taille
	maximum d'une ligne est 1024 caracteres.
	Une colonne de caracteres est formee par l'ensemble des caracteres dans
	un fichier qui sont separes par le meme nombre de caracteres du debut
	de leur ligne respective.
	On dit que deux caracteres se touchent s'ils sont :
		- soit sur la meme ligne et contigus.
		- soit sur la meme colone et sur des lignes contigues.
	Un ilot de 'X' est forme par l'ensemble des caracteres qui se touchent.
	Le programme doit parcourir le fichier ligne par ligne et l'afficher a
	l'ecran en remplacant tous les 'X' des ilots par leur numero
	d'apparition dans le fichier. Le programme devra effectue ce traitement
	en commancant par le debut du fichier.
	Il ne peut pas y avoir deux resultats differents pour un meme fichier.
	Si le fichier est vide, qu'une erreur s'est produite ou que aucun
	fichier n'est passe en parametre, le programme ecrit simplement le
	caractere '\n' sur sa sortie standard.
	Le fichier comporte au maximum 10 ilots.
	Vous trouverez dans le repertoire misc des exemples de fichier.

	Exemple 1:
	Voici le contenu du fichier "toto".

	.................XXXXXXXX..........................................
	....................XXXXXXXXX.......XXXXXXXX.......................
	.................XXXXXXXX..............XXX...XXXXX.................
	.....................XXXXXX.....X...XXXXXXXXXXX....................
	................................X..................................
	......XXXXXXXXXXXXX.............X..................................
	..................X.............XXXXXXXXX..........................
	..................X.........XXXXXXXXXXXX...........................
	..................X................................................
	XX.............................................................XXXX
	XX..................XXXXXXXXXXXXX.................................X
	...................................................................
	.................................................................X.
	.....................XXXXX.......................................XX

	(login@host)./count_island toto
	.................00000000..........................................
	....................000000000.......11111111.......................
	.................00000000..............111...11111.................
	.....................000000.....2...11111111111....................
	................................2..................................
	......3333333333333.............2..................................
	..................3.............222222222..........................
	..................3.........222222222222...........................
	..................3................................................
	44.............................................................5555
	44..................6666666666666.................................5
	...................................................................
	.................................................................7.
	.....................88888.......................................77
	(login@host)

	Exemple 2:
	Voici le contenu du fichier "flop_aime".

	...................................................................
	...X........X.....XXXXX......XXXXXXX...XXXXXXXXXX..XXXXXXXXXX......
	...XX......XX....XX...XX....XX.....XX.....XXXX.....XXXXXXXXXX......
	...XXXX..XXXX...XX.....XX...XX.....XX......XX......XX..............
	...XX.XXXX.XX...XX.....XX...XX.....XX......XX......XX..............
	...XX...X..XX...XX.....XX...XXXXXXXX.......XX......XXXXX...........
	...XX......XX...XXXXXXXXX...XXXX...........XX......XXXXX...........
	...XX......XX..XX.......XX..XX.XX..........XX......XX..............
	...XX......XX..XX.......XX..XX...X.........XX......XX..............
	...XX......XX..XX.......XX..XX....X......XXXXXX....XXXXXXXXXX......
	...XX......XX.XX.........XX.XX.....XX..XXXXXXXXXX..XXXXXXXXXX..X...
	...................................................................

	(login@host)./count_island flop_aime
	...................................................................
	...0........0.....11111......2222222...3333333333..4444444444......
	...00......00....11...11....22.....22.....3333.....4444444444......
	...0000..0000...11.....11...22.....22......33......44..............
	...00.0000.00...11.....11...22.....22......33......44..............
	...00...0..00...11.....11...22222222.......33......44444...........
	...00......00...111111111...2222...........33......44444...........
	...00......00..11.......11..22.22..........33......44..............
	...00......00..11.......11..22...5.........33......44..............
	...00......00..11.......11..22....6......333333....4444444444......
	...00......00.11.........11.22.....77..3333333333..4444444444..8...
	...................................................................
	(login@host)

	Exemple 3:
	Voici le contenu du fichier "titi"

	..X.......
	...X.X....
	....XX.XX.
	.X..XX....
	.X..X...X.

	(login@host)./count_island titi | cat -e
	..0.......$
	...1.2....$
	....22.33.$
	.4..22....$
	.4..2...5.$
	(login@host)

	Exemple 4:
	(login@host)./count_island | cat -e
	$
	(login@host)
-------------------------------------------------------------------------------
Exercise 5 : count_island
------------------------
Executable name         :       count_island
Directory name          :       ex_5
Suggested time          :       30 minutes.
Allowed functions       :       read, write, open, close, malloc, free
Makefile                :       yes



        This program takes a file containing a series of lines of equal
    length, containing either the '.' character or the 'X' character.
    these lines form a rectangle of '.' containing islands of 'X's.
    A line is a series of '.' and 'X' characters terminated by a '\n'.
    The lines are all of the same length. The maximum size of a line
    is 1024 characters.
    A column of characters is formed by all the characters in the file
    that are separated from the start of their respective lines by the
    same amount of characters.
    Two caracters are considered touching each other if they are :
        - contiguous and on the same line
          OR
        - on the same column and on contiguous lines
    An island of 'X' is formed by the set of characters touching each
    other. The program must look through the whole file line by line
    and display it on the screen with all the 'X's from the islands
    replaced by their number in order of apparition in the file. The
    program must do this computation starting by the start of the file.
    There can be no two different results from the same file.
    If the file is empty, an error occured or no file is passed, the
    program simply writes the '\n' character to the standard output.
    The file contains at most 10 islands.
    You can find example files in the misc directory.

    Example 1:
    Contents of the 'toto' file:

    .................XXXXXXXX..........................................
    ....................XXXXXXXXX.......XXXXXXXX.......................
    .................XXXXXXXX..............XXX...XXXXX.................
    .....................XXXXXX.....X...XXXXXXXXXXX....................
    ................................X..................................
    ......XXXXXXXXXXXXX.............X..................................
    ..................X.............XXXXXXXXX..........................
    ..................X.........XXXXXXXXXXXX...........................
    ..................X................................................
    XX.............................................................XXXX
    XX..................XXXXXXXXXXXXX.................................X
    ...................................................................
    .................................................................X.
    .....................XXXXX.......................................XX

    (login@host)./count_island toto
    .................00000000..........................................
    ....................000000000.......11111111.......................
    .................00000000..............111...11111.................
    .....................000000.....2...11111111111....................
    ................................2..................................
    ......3333333333333.............2..................................
    ..................3.............222222222..........................
    ..................3.........222222222222...........................
    ..................3................................................
    44.............................................................5555
    44..................6666666666666.................................5
    ...................................................................
    .................................................................7.
    .....................88888.......................................77
    (login@host)

    Example 2:
    Contents of the 'flop_likes' file :

    ...................................................................
    ...X........X.....XXXXX......XXXXXXX...XXXXXXXXXX..XXXXXXXXXX......
    ...XX......XX....XX...XX....XX.....XX.....XXXX.....XXXXXXXXXX......
    ...XXXX..XXXX...XX.....XX...XX.....XX......XX......XX..............
    ...XX.XXXX.XX...XX.....XX...XX.....XX......XX......XX..............
    ...XX...X..XX...XX.....XX...XXXXXXXX.......XX......XXXXX...........
    ...XX......XX...XXXXXXXXX...XXXX...........XX......XXXXX...........
    ...XX......XX..XX.......XX..XX.XX..........XX......XX..............
    ...XX......XX..XX.......XX..XX...X.........XX......XX..............
    ...XX......XX..XX.......XX..XX....X......XXXXXX....XXXXXXXXXX......
    ...XX......XX.XX.........XX.XX.....XX..XXXXXXXXXX..XXXXXXXXXX..X...
    ...................................................................

    (login@host)./count_island flop_likes
    ...................................................................
    ...0........0.....11111......2222222...3333333333..4444444444......
    ...00......00....11...11....22.....22.....3333.....4444444444......
    ...0000..0000...11.....11...22.....22......33......44..............
    ...00.0000.00...11.....11...22.....22......33......44..............
    ...00...0..00...11.....11...22222222.......33......44444...........
    ...00......00...111111111...2222...........33......44444...........
    ...00......00..11.......11..22.22..........33......44..............
    ...00......00..11.......11..22...5.........33......44..............
    ...00......00..11.......11..22....6......333333....4444444444......
    ...00......00.11.........11.22.....77..3333333333..4444444444..8...
    ...................................................................
    (login@host)

    Example 3:
    Contents of the 'titi' file :

    ..X.......
    ...X.X....
    ....XX.XX.
    .X..XX....
    .X..X...X.

    (login@host)./count_island titi | cat -e
    ..0.......$
    ...1.2....$
    ....22.33.$
    .4..22....$
    .4..2...5.$
    (login@host)

    Exemple 4:
    (login@host)./count_island | cat -e
    $
    (login@host)
