Details administratifs:

- Aucune forme de communication n'est permise.

	- Vous devez avoir votre carte d'etudiant. Vous devez la poser face visible
	  sur votre table

	- Ceci est un examen, il est interdit de discuter, ecouter de la musique,
	  faire du bruit, ou de produire toute autres nuisances pouvant deranger les
	  autres etudiants ou perturber le bon deroulement de l'examen

	- Vos telephones portables doivent etre eteints.
	
	- Il faudra utiliser le sous-repertoire "rendu" a la racine du compte,
	  il contiendra les repertoires aux noms demandes pour chaque
	  exercice.

	- Chaque exercice doit etre realise dans le repertoire correspondant au 
	  nom indique dans l'en-tete de chaque exercice.

	- Le repertoire "rendu", doit contenir un fichier nomme "auteur"
	  comprenant :
		le login (ex: jog) suivi d'un '\n'.
	  ce qui doit donner:

	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- C'est un programme qui s'occupe du ramassage, respectez les noms,
	  les chemins, les fichiers et les repertoires ...

	- LES DROITS DE VOS FICHIERS N'ONT AUCUNE IMPORTANCE, VOUS N'AVEZ DONC
	  PAS BESOIN DE LES CHANGER (SAUF SI ON VOUS LE DEMANDE DANS LE SUJET).
	
	- En cas de probleme technique avec le sujet, on ne doit s'adresser qu'au
	  surveillant uniquement.

	- Tout materiel non explicitement autorise est strictement interdit.

	- LES EXERCICES DOIVENT ETRE REALISES DANS L'ORDRE, la correction 
	  de l'examen s'arretera des qu'un exercice sera considere comme faux.

	- Toute sortie est definitive.


Le Code :

	- Des fonctions utiles sont parfois donnees dans le repertoire
	  ~/sujet/misc

	- Le releve du code est automatise, un programme testera le bon
	  fonctionnement des exercices.

	- Les fonctions autorisees sont indiquees dans l'en-tete de chaque 
	  exercice. Vous pouvez recoder toutes les fonctions a votre guise.

	- Toute fonction non autorisee explicitement est interdite.

	- Vous avez le droit a des feuilles blanches et un stylo.

	- Les exercices dit "subsidiaires" sont des exercices qui donnent des
	  points si vous avez fait les exercices qui les precedent.

	- Les exercices dit "bonus" sont des exercices qui donnent des points 
	  supplementaires meme si vous ne faites pas les exercices qui les 
	  precedent.

	- Pour toute question apres l'examen, creez un ticket sur l'intra-bocal
	  (http://intra-bocal.epitech.net), ou envoyez un mail a
	  contact@staff.epita.fr
-------------------------------------------------------------------------------
Administrative details:

- No communication of any kind is allowed.

	- You must have your student card. You must put it, face up, on your desk.

	- This is an exam, it is forbidden to talk, listen to music, make noise, or
	  produce any kind of nuisance that may disturb other students or prevent
	  this exam from running smoothly.

	- Your cell phones must be OFF.

	- You will have to use the "rendu" subdirectory at the root of your account,
	  which shall contain the directories named according to each exercise's
	  instructions.

	- Each exercise must be carried out in the directory mentioned in the
	  exercise's header.

	- The "rendu" subdirectory must contain a file named "auteur", containing:
	  the login (ex: jog) followed by a '\n'.

	  It should be so:
	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- The collection will be handled by a program, so you must respect the
	  names, paths, of all the files and directories...

	- RIGHTS OF YOUR FILES ARE OF NO CONSEQUENCE, YOU DO NOT HAVE TO CHANGE
	  THEM (EXCEPT IF THE SUBJECT ASKS YOU TO).

	- In case of a technical problem with the subject, you have to ask a
	  supervisor (and ONLY a supervisor).

	- Any equipment that is not explicitly allowed is strictly forbidden.

	- EXERCISES MUST BE CARRIED OUT IN ORDER. Grading will stop as soon as
	  an exercise is deemed false.

	- Any exit is definitive.


The code:

	- Useful functions are sometimes given in the ~/sujet/misc directory.

	- Collection of the code is automated, and a program will check that
	  your exercises work correctly.

	- Allowed functions are specified in each exercise's header. You can
	  re-code any function you like.

	- Any function not explicitly allowed is forbidden.

	- You have a right to blank sheets of paper and a pen.

	- "Subsidiary" exercises are exercises that give points if you have
	  done the previous exercises.

	- "Bonus" exercises are exercises that give bonus points even if you
	  haven't done the previous exercises.

	- For any question after the exam, create a ticket on the intra-bocal
	  (http://intra-bocal.epitech.net), or send a mail to
	  contact@staff.epita.fr

 ----------******------------*****------------******------------*****----------


------------------- ******** -------------------

Exercice 1 : union
--------------------------
Nom de l'executable  :          union
Nom du repertoire    :          ex_1
Temps de realisation :          30 minutes.
Fonctions autorisees :          write
Makefile             :          oui


        Ecrire un programme qui prend en parametre deux chaines de
        caracteres et qui affiche sans doublon les caracteres qui apparaissent
	dans l'une ou dans l'autre.

	L'affichage se fera dans l'ordre d'apparition dans la ligne de
	commande.

	L'affichage doit etre suivi d'un '\n'.
	
	Si il n y a pas deux parametres le programme affiche '\n'.


exemple 1:
(jog@almarita)./union zpadinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
zpadintoqefwjy$
(jog@almarita)


exemple 2:
(jog@almarita)./union ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
df6vewg4thras$
(jog@almarita)


exemple 3:
(jog@almarita)./union "rien" "cette phrase ne cache rien" | cat -e
rienct phas$
(jog@almarita)


exemple 4:
(jog@almarita)./union | cat -e
$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 1 : union
--------------------------
Executable name      :          union
Directory name       :          ex_1
Suggested time       :          30 minutes.
Allowed functions    :          write
Makefile             :          yes


        Write a program that takes two strings and displays, without doubles,
        the characters that appear in one or the other.

        The output will be in order of apparition in the command line.

        The output will be followed by a '\n'.

        If there isn't two parameters, display a '\n'.


Example 1:
(jog@almarita)./union zpadinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
zpadintoqefwjy$
(jog@almarita)


Example 2:
(jog@almarita)./union ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
df6vewg4thras$
(jog@almarita)


Example 3:
(jog@almarita)./union "rien" "cette phrase ne cache rien" | cat -e
rienct phas$
(jog@almarita)


Example 4:
(jog@almarita)./union | cat -e
$
(jog@almarita)


------------------- ******** -------------------

Exercice 2 : common_str
__________________________
Nom du programme                :       common_str
Nom du repertoire               :       ex_2
Temps de realisation            :       30 minutes
Fonctions autorisees            :       my_putchar, my_putstr


          La commande prend deux chaines en parametre.
          La commande common_str affiche le nombre de caracteres communs 
        a ces deux chaines. 
          C'est a dire le nombre d'occurences des caracteres qui se trouvent
        dans les deux chaines.
          On considerera qu'il n'y a aucun doublon dans aucun des parametres.


Exemple :
(jog@almarita)./common_str "kh~ xz" "o[ixhf vns" | cat -e
3$
(jog@almarita)

explication:
   {h, l'espace, x} sont communs aux deux parametres.
-------------------------------------------------------------------------------
Exercise 2 : common_str
__________________________
Executable name                 :       common_str
Directory name                  :       ex_2
Suggested time                  :       30 minutes
Allowed functions               :       my_putchar, my_putstr


          The command takes two strings as parameter.
          The command common_str displays the number of characters that
          are common to these two strings, that is to say the number of
          characters that can be found in both strings.
          Assume there are no doubles in the parameters.


Example :
(jog@almarita)./common_str "kh~ xz" "o[ixhf vns" | cat -e
3$
(jog@almarita)

Explanation:
   {h, the space, x} are common to both parameters.


------------------- ******** -------------------

Exercice 3  : half_str
________________________
Nom de l'executable     :       half_str
Nom du repertoire       :       ex_3
Temps de realisation    :       15 minutes
Language		:	C
Fonction autorisee      :       my_putchar, my_strlen, my_putstr, write
Makefile		:	obligatoire


         Ecrire un programme qui prend en parametre une ou plusieurs chaines
	 de caracteres et qui affiche chaque chaine un caractere sur deux.

	 Si plusieurs chaines sont passees en parametres, le programme
	 affiche '\n' apres chaque chaine.

         L'affichage se termine toujours par un '\n'.

         Si aucun parametre n'est transmis, le programme affiche '\n'.



exemple 1:
> ./half_str "abc"
ac
>

exemple 2:
> ./half_str "test de phrase" "deuxieme test" "un avant dernier test" "" "enfin c'est finis" | cat -e
ts eprs$
duim et$
u vn ene et$
$
efncetfns$
>

exemple 3:
> ./half_str "a btcfdceqf gehdiajikhllmgnaovpyqer srttuuvawcxayaz" "142637415869728395" "          " "Baodnxnce   cshja4nycrew qaq dtdoduqsq" | cat -e 
abcdefghijklmnopqrstuvwxyz$
123456789$
     $
Bonne chance a tous$
>

exemple 3:
> ./half_str | cat -e
$
>
-------------------------------------------------------------------------------
Exercise 3  : half_str
________________________
Executable name         :       half_str
Directory name          :       ex_3
Suggested time          :       15 minutes
Language                :       C
Allowed functions       :       my_putchar, my_strlen, my_putstr, write
Makefile                :       yes


        Write a program that takes one or more strings and displays each
        string's odd characters.

        If multiple strings are passed, the program displays '\n' after each.

        The output is always finished by a '\n'.

        If no parameters are passed, the program displays '\n'.


Example 1:
> ./half_str "abc"
ac
>

Example 2:
> ./half_str "test de phrase" "deuxieme test" "un avant dernier test" "" "enfin c'est finis" | cat -e
ts eprs$
duim et$
u vn ene et$
$
efncetfns$
>

Example 3:
> ./half_str "a btcfdceqf gehdiajikhllmgnaovpyqer srttuuvawcxayaz" "142637415869728395" "          " "Baodnxnce   cshja4nycrew qaq dtdoduqsq" | cat -e 
abcdefghijklmnopqrstuvwxyz$
123456789$
     $
Bonne chance a tous$
>

Example 3:
> ./half_str | cat -e
$
>


------------------- ******** -------------------

Exercice 4 : count_island
------------------------
Nom de l'executable     :       count_island
Nom du repertoire       :       ex_4
temps de realisation    :       30 minutes.
Fonction autorisee      :       read, write, open, close, malloc, free
Makefile		: 	oui



        Le programme prend en parametre un fichier contenant une serie de
	lignes de longueurs egales contenant soit le caractere '.' soit le
	caractere 'X'. Ces lignes forment un rectangle de '.' comportant des
	ilots de 'X'.
	Une ligne est une suite de caracteres '.' et de caracteres 'X' qui se
	termine par un '\n'. Les lignes font toutes la meme taille. La taille
	maximum d'une ligne est 1024 caracteres.
	Une colonne de caracteres est formee par l'ensemble des caracteres dans
	un fichier qui sont separes par le meme nombre de caracteres du debut
	de leur ligne respective.
	On dit que deux caracteres se touchent s'ils sont :
		- soit sur la meme ligne et contigus.
		- soit sur la meme colone et sur des lignes contigues.
	Un ilot de 'X' est forme par l'ensemble des caracteres qui se touchent.
	Le programme doit parcourir le fichier ligne par ligne et l'afficher a
	l'ecran en remplacant tous les 'X' des ilots par leur numero
	d'apparition dans le fichier. Le programme devra effectue ce traitement
	en commancant par le debut du fichier.
	Il ne peut pas y avoir deux resultats differents pour un meme fichier.
	Si le fichier est vide, qu'une erreur s'est produite ou que aucun
	fichier n'est passe en parametre, le programme ecrit simplement le
	caractere '\n' sur sa sortie standard.
	Le fichier comporte au maximum 10 ilots.
	Vous trouverez dans le repertoire misc des exemples de fichier.

	Exemple 1:
	Voici le contenu du fichier "toto".

	.................XXXXXXXX..........................................
	....................XXXXXXXXX.......XXXXXXXX.......................
	.................XXXXXXXX..............XXX...XXXXX.................
	.....................XXXXXX.....X...XXXXXXXXXXX....................
	................................X..................................
	......XXXXXXXXXXXXX.............X..................................
	..................X.............XXXXXXXXX..........................
	..................X.........XXXXXXXXXXXX...........................
	..................X................................................
	XX.............................................................XXXX
	XX..................XXXXXXXXXXXXX.................................X
	...................................................................
	.................................................................X.
	.....................XXXXX.......................................XX

	(login@host)./count_island toto
	.................00000000..........................................
	....................000000000.......11111111.......................
	.................00000000..............111...11111.................
	.....................000000.....2...11111111111....................
	................................2..................................
	......3333333333333.............2..................................
	..................3.............222222222..........................
	..................3.........222222222222...........................
	..................3................................................
	44.............................................................5555
	44..................6666666666666.................................5
	...................................................................
	.................................................................7.
	.....................88888.......................................77
	(login@host)

	Exemple 2:
	Voici le contenu du fichier "flop_aime".

	...................................................................
	...X........X.....XXXXX......XXXXXXX...XXXXXXXXXX..XXXXXXXXXX......
	...XX......XX....XX...XX....XX.....XX.....XXXX.....XXXXXXXXXX......
	...XXXX..XXXX...XX.....XX...XX.....XX......XX......XX..............
	...XX.XXXX.XX...XX.....XX...XX.....XX......XX......XX..............
	...XX...X..XX...XX.....XX...XXXXXXXX.......XX......XXXXX...........
	...XX......XX...XXXXXXXXX...XXXX...........XX......XXXXX...........
	...XX......XX..XX.......XX..XX.XX..........XX......XX..............
	...XX......XX..XX.......XX..XX...X.........XX......XX..............
	...XX......XX..XX.......XX..XX....X......XXXXXX....XXXXXXXXXX......
	...XX......XX.XX.........XX.XX.....XX..XXXXXXXXXX..XXXXXXXXXX..X...
	...................................................................

	(login@host)./count_island flop_aime
	...................................................................
	...0........0.....11111......2222222...3333333333..4444444444......
	...00......00....11...11....22.....22.....3333.....4444444444......
	...0000..0000...11.....11...22.....22......33......44..............
	...00.0000.00...11.....11...22.....22......33......44..............
	...00...0..00...11.....11...22222222.......33......44444...........
	...00......00...111111111...2222...........33......44444...........
	...00......00..11.......11..22.22..........33......44..............
	...00......00..11.......11..22...5.........33......44..............
	...00......00..11.......11..22....6......333333....4444444444......
	...00......00.11.........11.22.....77..3333333333..4444444444..8...
	...................................................................
	(login@host)

	Exemple 3:
	Voici le contenu du fichier "titi"

	..X.......
	...X.X....
	....XX.XX.
	.X..XX....
	.X..X...X.

	(login@host)./count_island titi | cat -e
	..0.......$
	...1.2....$
	....22.33.$
	.4..22....$
	.4..2...5.$
	(login@host)

	Exemple 4:
	(login@host)./count_island | cat -e
	$
	(login@host)
-------------------------------------------------------------------------------
Exercise 4 : count_island
------------------------
Executable name         :       count_island
Directory name          :       ex_4
Suggested time          :       30 minutes.
Allowed functions       :       read, write, open, close, malloc, free
Makefile                :       yes



        This program takes a file containing a series of lines of equal
    length, containing either the '.' character or the 'X' character.
    these lines form a rectangle of '.' containing islands of 'X's.
    A line is a series of '.' and 'X' characters terminated by a '\n'.
    The lines are all of the same length. The maximum size of a line
    is 1024 characters.
    A column of characters is formed by all the characters in the file
    that are separated from the start of their respective lines by the
    same amount of characters.
    Two caracters are considered touching each other if they are :
        - contiguous and on the same line
          OR
        - on the same column and on contiguous lines
    An island of 'X' is formed by the set of characters touching each
    other. The program must look through the whole file line by line
    and display it on the screen with all the 'X's from the islands
    replaced by their number in order of apparition in the file. The
    program must do this computation starting by the start of the file.
    There can be no two different results from the same file.
    If the file is empty, an error occured or no file is passed, the
    program simply writes the '\n' character to the standard output.
    The file contains at most 10 islands.
    You can find example files in the misc directory.

    Example 1:
    Contents of the 'toto' file:

    .................XXXXXXXX..........................................
    ....................XXXXXXXXX.......XXXXXXXX.......................
    .................XXXXXXXX..............XXX...XXXXX.................
    .....................XXXXXX.....X...XXXXXXXXXXX....................
    ................................X..................................
    ......XXXXXXXXXXXXX.............X..................................
    ..................X.............XXXXXXXXX..........................
    ..................X.........XXXXXXXXXXXX...........................
    ..................X................................................
    XX.............................................................XXXX
    XX..................XXXXXXXXXXXXX.................................X
    ...................................................................
    .................................................................X.
    .....................XXXXX.......................................XX

    (login@host)./count_island toto
    .................00000000..........................................
    ....................000000000.......11111111.......................
    .................00000000..............111...11111.................
    .....................000000.....2...11111111111....................
    ................................2..................................
    ......3333333333333.............2..................................
    ..................3.............222222222..........................
    ..................3.........222222222222...........................
    ..................3................................................
    44.............................................................5555
    44..................6666666666666.................................5
    ...................................................................
    .................................................................7.
    .....................88888.......................................77
    (login@host)

    Example 2:
    Contents of the 'flop_likes' file :

    ...................................................................
    ...X........X.....XXXXX......XXXXXXX...XXXXXXXXXX..XXXXXXXXXX......
    ...XX......XX....XX...XX....XX.....XX.....XXXX.....XXXXXXXXXX......
    ...XXXX..XXXX...XX.....XX...XX.....XX......XX......XX..............
    ...XX.XXXX.XX...XX.....XX...XX.....XX......XX......XX..............
    ...XX...X..XX...XX.....XX...XXXXXXXX.......XX......XXXXX...........
    ...XX......XX...XXXXXXXXX...XXXX...........XX......XXXXX...........
    ...XX......XX..XX.......XX..XX.XX..........XX......XX..............
    ...XX......XX..XX.......XX..XX...X.........XX......XX..............
    ...XX......XX..XX.......XX..XX....X......XXXXXX....XXXXXXXXXX......
    ...XX......XX.XX.........XX.XX.....XX..XXXXXXXXXX..XXXXXXXXXX..X...
    ...................................................................

    (login@host)./count_island flop_likes
    ...................................................................
    ...0........0.....11111......2222222...3333333333..4444444444......
    ...00......00....11...11....22.....22.....3333.....4444444444......
    ...0000..0000...11.....11...22.....22......33......44..............
    ...00.0000.00...11.....11...22.....22......33......44..............
    ...00...0..00...11.....11...22222222.......33......44444...........
    ...00......00...111111111...2222...........33......44444...........
    ...00......00..11.......11..22.22..........33......44..............
    ...00......00..11.......11..22...5.........33......44..............
    ...00......00..11.......11..22....6......333333....4444444444......
    ...00......00.11.........11.22.....77..3333333333..4444444444..8...
    ...................................................................
    (login@host)

    Example 3:
    Contents of the 'titi' file :

    ..X.......
    ...X.X....
    ....XX.XX.
    .X..XX....
    .X..X...X.

    (login@host)./count_island titi | cat -e
    ..0.......$
    ...1.2....$
    ....22.33.$
    .4..22....$
    .4..2...5.$
    (login@host)

    Exemple 4:
    (login@host)./count_island | cat -e
    $
    (login@host)


------------------- ******** -------------------

Exercice 5 :     magicsquare
___________________________
Nom du fichier          :       msquare
Nom du repertoire       :       ex_5
Makefile		:	oui
Langage			:	C
Fonctions autorisees	:	write, malloc, free
Temps de realisation    :       15 minutes.



         - Il s'agit de faire un programme qui complete et affiche le carre
	   magique de 3x3, en fonction des nombres n1 a n9 fournis.

	 - Un carre magique est un carre dont la somme des nombres de chaque
	   colone est egale a la somme des nombres de chaque ligne, et a la
	   somme des nombres de chaque diagonale.

	   Exemple:
	   8 1 6
	   3 5 7
	   4 9 2
	   est un carre magique ou la somme est 15 a chaque fois.

	 - Il sera apelle ainsi:
> ./msquare "n1 n2 n3 n4 n5 n6 n7 n8 n9"
	   ou les numeros correspondent a cela:
	   n1 n2 n3
	   n4 n5 n6
	   n7 n8 n9

	 - Vous devez utiliser un Makefile. Le binaire sera efface avant
	   compilation.

	 - Il faut gerer les chiffres de 1 a 9, si un nombre est egal a '?' on
	   doit completer cette case.

	 - Si il y a une solution, le programme affiche les 9
           nombres separes par des espaces suivi de "OK\n".
	   Sinon il affiche "KO\n".

         - Il ne faut afficher aucun caractere avant la representation du
           carre ni apres (hormis le OK\n).

	 - Le resultat serait donc:

(jog@almarita) ./msquare "8 1 6 ? 5 ? 4 9 ?" | cat -e
8 1 6 3 5 7 4 9 2 OK$
(jog@almarita) ./msquare "8 1 6 3 5 7 4 9 2" | cat -e
8 1 6 3 5 7 4 9 2 OK$
(jog@almarita) ./msquare "6 1 8 ? 5 ? 4 9 ?" | cat -e
KO$
(jog@almarita) ./msquare "6 1 8 3 5 7 4 9 2" | cat -e
KO$
(jog@almarita) ./msquare "3 4 5 2 8 7" | cat -e
KO$
(jog@almarita) ./msquare "3 1 5 7 9 8 2 0 4 5 6" | cat -e
KO$
(jog@almarita) ./msquare | cat -e
KO$
(jog@almarita)
-------------------------------------------------------------------------------
Exercise 5 :     magicsquare
___________________________
File name               :       msquare
Directory name          :       ex_5
Makefile                :       yes
Language                :       C
Allowed functions       :       write, malloc, free
Suggested time          :       15 minutes.



        You have to write a program that computes and display the 3x3 magic
        square corresponding to the n1 to n9 digits passed.

        A magic square is a square in which the sum of the numbers in each line
        is equal to the sum of the numbers in each column, and each diagonal.

        Example:
        8 1 6
        3 5 7
        4 9 2
        is a magic square where the sums are always equal to 15

        It will be called as follows:
        > ./msquare "n1 n2 n3 n4 n5 n6 n7 n8 n9"
        where numbers correspond to:
        n1 n2 n3
        n4 n5 n6
        n7 n8 n9

        You must use a Makefile. The executable will be removed before
        compilation.

        You must handle digits from 1 to 9. If a number is equal to '?' you
        must complete this cell.

        If there is a solution, the program displays the 9 numbers separated
        by a space followed by "OK\n".
        Otherwise it displays "KO\n".

        You must display nothing before or after the square (except for OK\n).


Example :
(jog@almarita) ./msquare "8 1 6 ? 5 ? 4 9 ?" | cat -e
8 1 6 3 5 7 4 9 2 OK$
(jog@almarita) ./msquare "8 1 6 3 5 7 4 9 2" | cat -e
8 1 6 3 5 7 4 9 2 OK$
(jog@almarita) ./msquare "6 1 8 ? 5 ? 4 9 ?" | cat -e
KO$
(jog@almarita) ./msquare "6 1 8 3 5 7 4 9 2" | cat -e
KO$
(jog@almarita) ./msquare "3 4 5 2 8 7" | cat -e
KO$
(jog@almarita) ./msquare "3 1 5 7 9 8 2 0 4 5 6" | cat -e
KO$
(jog@almarita) ./msquare | cat -e
KO$
(jog@almarita)
